package org.hitcombo.algevox2.grams;

/* The following code was generated by JFlex 1.4.3 on 7/09/11 06:34 PM */

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.ArrayList;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/09/11 06:34 PM from the specification file
 * <tt>lexer.l</tt>
 */
class TokensLex {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int[] ZZ_LEXSTATE = {
			0, 0
	};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED =
			"\11\0\2\33\2\0\1\33\22\0\1\17\3\0\1\37\5\0\1\35" +
					"\4\0\1\34\12\36\7\0\1\2\1\15\1\12\1\13\1\4\1\25" +
					"\1\24\1\23\1\14\1\26\1\27\1\20\1\1\1\5\1\6\1\7" +
					"\1\31\1\10\1\3\1\22\1\21\1\11\1\40\1\32\1\30\1\16" +
					"\4\0\1\37\1\0\1\2\1\15\1\12\1\13\1\4\1\25\1\24" +
					"\1\23\1\14\1\26\1\27\1\20\1\1\1\5\1\6\1\7\1\31" +
					"\1\10\1\3\1\22\1\21\1\11\1\40\1\32\1\30\1\16\47\0" +
					"\4\37\4\0\1\37\12\0\1\37\4\0\1\37\5\0\27\37\1\0" +
					"\37\37\1\0\u013f\37\31\0\162\37\4\0\14\37\16\0\5\37\11\0" +
					"\1\37\213\0\1\37\13\0\1\37\1\0\3\37\1\0\1\37\1\0" +
					"\24\37\1\0\54\37\1\0\46\37\1\0\5\37\4\0\202\37\10\0" +
					"\105\37\1\0\46\37\2\0\2\37\6\0\20\37\41\0\46\37\2\0" +
					"\1\37\7\0\47\37\110\0\33\37\5\0\3\37\56\0\32\37\5\0" +
					"\13\37\43\0\2\37\1\0\143\37\1\0\1\37\17\0\2\37\7\0" +
					"\2\37\12\0\3\37\2\0\1\37\20\0\1\37\1\0\36\37\35\0" +
					"\3\37\60\0\46\37\13\0\1\37\u0152\0\66\37\3\0\1\37\22\0" +
					"\1\37\7\0\12\37\43\0\10\37\2\0\2\37\2\0\26\37\1\0" +
					"\7\37\1\0\1\37\3\0\4\37\3\0\1\37\36\0\2\37\1\0" +
					"\3\37\16\0\4\37\21\0\6\37\4\0\2\37\2\0\26\37\1\0" +
					"\7\37\1\0\2\37\1\0\2\37\1\0\2\37\37\0\4\37\1\0" +
					"\1\37\23\0\3\37\20\0\11\37\1\0\3\37\1\0\26\37\1\0" +
					"\7\37\1\0\2\37\1\0\5\37\3\0\1\37\22\0\1\37\17\0" +
					"\2\37\17\0\1\37\23\0\10\37\2\0\2\37\2\0\26\37\1\0" +
					"\7\37\1\0\2\37\1\0\5\37\3\0\1\37\36\0\2\37\1\0" +
					"\3\37\17\0\1\37\21\0\1\37\1\0\6\37\3\0\3\37\1\0" +
					"\4\37\3\0\2\37\1\0\1\37\1\0\2\37\3\0\2\37\3\0" +
					"\3\37\3\0\10\37\1\0\3\37\77\0\1\37\13\0\10\37\1\0" +
					"\3\37\1\0\27\37\1\0\12\37\1\0\5\37\46\0\2\37\43\0" +
					"\10\37\1\0\3\37\1\0\27\37\1\0\12\37\1\0\5\37\3\0" +
					"\1\37\40\0\1\37\1\0\2\37\43\0\10\37\1\0\3\37\1\0" +
					"\27\37\1\0\20\37\46\0\2\37\43\0\22\37\3\0\30\37\1\0" +
					"\11\37\1\0\1\37\2\0\7\37\72\0\60\37\1\0\2\37\13\0" +
					"\10\37\72\0\2\37\1\0\1\37\2\0\2\37\1\0\1\37\2\0" +
					"\1\37\6\0\4\37\1\0\7\37\1\0\3\37\1\0\1\37\1\0" +
					"\1\37\2\0\2\37\1\0\4\37\1\0\2\37\11\0\1\37\2\0" +
					"\5\37\1\0\1\37\25\0\2\37\42\0\1\37\77\0\10\37\1\0" +
					"\42\37\35\0\4\37\164\0\42\37\1\0\5\37\1\0\2\37\45\0" +
					"\6\37\112\0\46\37\12\0\51\37\7\0\132\37\5\0\104\37\5\0" +
					"\122\37\6\0\7\37\1\0\77\37\1\0\1\37\1\0\4\37\2\0" +
					"\7\37\1\0\1\37\1\0\4\37\2\0\47\37\1\0\1\37\1\0" +
					"\4\37\2\0\37\37\1\0\1\37\1\0\4\37\2\0\7\37\1\0" +
					"\1\37\1\0\4\37\2\0\7\37\1\0\7\37\1\0\27\37\1\0" +
					"\37\37\1\0\1\37\1\0\4\37\2\0\7\37\1\0\47\37\1\0" +
					"\23\37\105\0\125\37\14\0\u026c\37\2\0\10\37\12\0\32\37\5\0" +
					"\113\37\3\0\3\37\17\0\15\37\1\0\4\37\16\0\22\37\16\0" +
					"\22\37\16\0\15\37\1\0\3\37\17\0\64\37\43\0\1\37\3\0" +
					"\2\37\103\0\130\37\10\0\51\37\127\0\35\37\63\0\36\37\2\0" +
					"\5\37\u038b\0\154\37\224\0\234\37\4\0\132\37\6\0\26\37\2\0" +
					"\6\37\2\0\46\37\2\0\6\37\2\0\10\37\1\0\1\37\1\0" +
					"\1\37\1\0\1\37\1\0\37\37\2\0\65\37\1\0\7\37\1\0" +
					"\1\37\3\0\3\37\1\0\7\37\3\0\4\37\2\0\6\37\4\0" +
					"\15\37\5\0\3\37\1\0\7\37\102\0\2\37\23\0\1\37\34\0" +
					"\1\37\15\0\1\37\40\0\22\37\120\0\1\37\4\0\1\37\2\0" +
					"\12\37\1\0\1\37\3\0\5\37\6\0\1\37\1\0\1\37\1\0" +
					"\1\37\1\0\4\37\1\0\3\37\1\0\7\37\3\0\3\37\5\0" +
					"\5\37\26\0\44\37\u0e81\0\3\37\31\0\11\37\7\0\5\37\2\0" +
					"\5\37\4\0\126\37\6\0\3\37\1\0\137\37\5\0\50\37\4\0" +
					"\136\37\21\0\30\37\70\0\20\37\u0200\0\u19b6\37\112\0\u51a6\37\132\0" +
					"\u048d\37\u0773\0\u2ba4\37\u215c\0\u012e\37\2\0\73\37\225\0\7\37\14\0" +
					"\5\37\5\0\1\37\1\0\12\37\1\0\15\37\1\0\5\37\1\0" +
					"\1\37\1\0\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0" +
					"\100\37\2\0\66\37\50\0\15\37\66\0\2\37\30\0\3\37\31\0" +
					"\1\37\6\0\5\37\1\0\207\37\7\0\1\37\34\0\32\37\4\0" +
					"\1\37\1\0\32\37\12\0\132\37\3\0\6\37\2\0\6\37\2\0" +
					"\6\37\2\0\3\37\3\0\2\37\3\0\2\37\31\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\1\0\16\1\1\2\13\1\1\2\1\0\1\1\3\0" +
					"\1\3\3\0\1\4\21\0\1\5\10\0\1\6\16\0" +
					"\1\7\16\0\1\10\24\0\1\11\1\0\1\12\4\0" +
					"\1\13\3\0\1\4\43\0\1\14\1\0\1\15\3\0" +
					"\1\16\12\0\1\11\12\0\1\17\1\0\1\10\20\0" +
					"\1\10\4\0\1\20\13\0\1\21\31\0\1\22\30\0" +
					"\1\23\13\0\1\24\1\25\16\0\1\10\5\0\1\26" +
					"\11\0\1\27\1\30\2\0\1\31\1\32\1\33\1\0" +
					"\1\34\12\0\1\35\1\36\7\0\2\37\4\0\1\40" +
					"\5\0\1\2\2\0\1\41\1\42\1\3\11\0\1\43" +
					"\1\44\2\0\1\45\4\0\1\46\3\0\1\47\5\0" +
					"\1\50\1\0\1\51\16\0\1\52\14\0\1\53\1\54" +
					"\6\0\1\55\3\0\1\56\2\0\1\57\4\0\1\60" +
					"\1\61\7\0\1\62\1\63\1\64\2\0\1\65\17\0" +
					"\1\66\3\0\1\67\17\0\1\6\10\0\1\70\24\0" +
					"\1\71\12\0\1\72\1\56\4\0\1\73\25\0\1\10" +
					"\4\0\1\74\11\0\1\75\35\0\1\10\12\0\1\71" +
					"\14\0\1\76\13\0\1\64\2\0\1\77\1\100\55\0" +
					"\1\10\1\0\2\10\2\0\1\101\11\0\1\102\24\0" +
					"\1\103\7\0\1\3\12\0\1\5\10\0\1\6\20\0" +
					"\1\101\40\0\1\16\3\0\1\11\12\0\1\104\6\0" +
					"\1\105\1\0\1\14\2\0\1\16\1\0\1\106\1\0" +
					"\1\11\13\0\1\17\2\0\1\10\13\0\1\20\13\0" +
					"\1\22\21\0\1\107\13\0\1\30\1\0\1\31\1\0" +
					"\1\110\11\0\1\35\4\0\1\111\3\0\1\44\3\0" +
					"\1\112\1\0\1\50\3\0\1\113\3\0\1\107\1\10" +
					"\10\0\1\54\15\0\1\60\2\0\1\114\1\0\1\63" +
					"\1\115\5\0\1\116\4\0\1\117\2\0\1\10\3\0" +
					"\1\120\6\0\1\72\2\0\1\121\5\0\1\122\2\0" +
					"\1\74\2\0\1\75\6\0\1\123\1\124\1\125\3\0" +
					"\1\76\1\0\1\126\1\0\1\127\2\0\1\130\5\0" +
					"\1\131\3\0\1\132\1\133\3\0\1\134\1\0\1\135" +
					"\1\136\1\0\1\137\2\0\1\140";

	private static int[] zzUnpackAction() {
		int[] result = new int[1061];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value;
			while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347" +
					"\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef" +
					"\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7" +
					"\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\u03ff" +
					"\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507" +
					"\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\u060f" +
					"\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6\0\u0717" +
					"\0\u0738\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd\0\u07fe\0\u081f" +
					"\0\u0840\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\u0906\0\u0927" +
					"\0\u0948\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f" +
					"\0\u0a50\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37" +
					"\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f" +
					"\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47" +
					"\0\u0d68\0\u0d89\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f" +
					"\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36\0\u0f57" +
					"\0\u0f78\0\u0f99\0\u03bd\0\u0fba\0\u0fdb\0\u0ffc\0\u03bd\0\u101d" +
					"\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u10e3\0\u1104\0\u1125" +
					"\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d" +
					"\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335" +
					"\0\u1356\0\u1377\0\u1398\0\u13b9\0\u13da\0\u13fb\0\u141c\0\u143d" +
					"\0\u145e\0\u147f\0\u14a0\0\u14c1\0\u03bd\0\u14e2\0\u1503\0\u1524" +
					"\0\u1545\0\u1566\0\u1587\0\u15a8\0\u15c9\0\u15ea\0\u160b\0\u162c" +
					"\0\u164d\0\u166e\0\u168f\0\u16b0\0\u16d1\0\u16f2\0\u1713\0\u1734" +
					"\0\u1755\0\u1776\0\u1797\0\u17b8\0\u17d9\0\u17fa\0\u181b\0\u183c" +
					"\0\u185d\0\u187e\0\u189f\0\u18c0\0\u18e1\0\u1902\0\u1923\0\u1944" +
					"\0\u1965\0\u1986\0\u19a7\0\u19c8\0\u19e9\0\u1a0a\0\u1a2b\0\u1a4c" +
					"\0\u1a6d\0\u1a8e\0\u1aaf\0\u1ad0\0\u1af1\0\u1b12\0\u1b33\0\u1b54" +
					"\0\u1b75\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9\0\u1c1a\0\u1c3b\0\u1c5c" +
					"\0\u1c7d\0\u1c9e\0\u03bd\0\u1cbf\0\u1ce0\0\u1d01\0\u1d22\0\u1d43" +
					"\0\u1d64\0\u1d85\0\u1da6\0\u1dc7\0\u1de8\0\u1e09\0\u1e2a\0\u1e4b" +
					"\0\u1e6c\0\u1e8d\0\u1eae\0\u1ecf\0\u1ef0\0\u1f11\0\u1f32\0\u1f53" +
					"\0\u1f74\0\u1f95\0\u1fb6\0\u1fd7\0\u1ff8\0\u2019\0\u203a\0\u205b" +
					"\0\u207c\0\u209d\0\u20be\0\u20df\0\u2100\0\u2121\0\u2142\0\u2163" +
					"\0\u2184\0\u21a5\0\u21c6\0\u21e7\0\u2208\0\u2229\0\u224a\0\u226b" +
					"\0\u228c\0\u22ad\0\u22ce\0\u22ef\0\u2310\0\u03bd\0\u2331\0\u2352" +
					"\0\u2373\0\u2394\0\u23b5\0\u23d6\0\u23f7\0\u2418\0\u2439\0\u245a" +
					"\0\u247b\0\u03bd\0\u03bd\0\u249c\0\u24bd\0\u24de\0\u24ff\0\u2520" +
					"\0\u2541\0\u2562\0\u2583\0\u25a4\0\u25c5\0\u25e6\0\u2607\0\u2628" +
					"\0\u2649\0\u266a\0\u268b\0\u26ac\0\u26cd\0\u26ee\0\u270f\0\u03bd" +
					"\0\u2730\0\u2751\0\u2772\0\u2793\0\u27b4\0\u27d5\0\u27f6\0\u2817" +
					"\0\u2838\0\u03bd\0\u2859\0\u287a\0\u289b\0\u28bc\0\u03bd\0\u28dd" +
					"\0\u28fe\0\u03bd\0\u291f\0\u2940\0\u2961\0\u2982\0\u29a3\0\u29c4" +
					"\0\u29e5\0\u2a06\0\u2a27\0\u2a48\0\u2a69\0\u03bd\0\u2a8a\0\u2aab" +
					"\0\u2acc\0\u2aed\0\u2b0e\0\u2b2f\0\u2b50\0\u03bd\0\u1d01\0\u2b71" +
					"\0\u2b92\0\u2bb3\0\u2bd4\0\u03bd\0\u2bf5\0\u2c16\0\u2c37\0\u2c58" +
					"\0\u2c79\0\u03bd\0\u2c9a\0\u2cbb\0\u03bd\0\u2cdc\0\u03bd\0\u2cfd" +
					"\0\u2d1e\0\u2d3f\0\u2d60\0\u2d81\0\u2da2\0\u2dc3\0\u2de4\0\u2e05" +
					"\0\u03bd\0\u2e26\0\u2e47\0\u2e68\0\u03bd\0\u2e89\0\u2eaa\0\u2ecb" +
					"\0\u2eec\0\u03bd\0\u2f0d\0\u2f2e\0\u2f4f\0\u03bd\0\u2f70\0\u2f91" +
					"\0\u2fb2\0\u2fd3\0\u2ff4\0\u3015\0\u3036\0\u03bd\0\u3057\0\u3078" +
					"\0\u3099\0\u30ba\0\u30db\0\u30fc\0\u311d\0\u313e\0\u315f\0\u3180" +
					"\0\u31a1\0\u31c2\0\u31e3\0\u3204\0\u03bd\0\u3225\0\u3246\0\u3267" +
					"\0\u3288\0\u32a9\0\u32ca\0\u32eb\0\u330c\0\u332d\0\u334e\0\u336f" +
					"\0\u3390\0\u03bd\0\u33b1\0\u33d2\0\u33f3\0\u3414\0\u3435\0\u3456" +
					"\0\u3477\0\u03bd\0\u3498\0\u34b9\0\u34da\0\u34fb\0\u351c\0\u353d" +
					"\0\u03bd\0\u355e\0\u357f\0\u35a0\0\u35c1\0\u35e2\0\u03bd\0\u3603" +
					"\0\u3624\0\u3645\0\u3666\0\u3687\0\u36a8\0\u36c9\0\u03bd\0\u36ea" +
					"\0\u03bd\0\u370b\0\u372c\0\u03bd\0\u374d\0\u376e\0\u378f\0\u37b0" +
					"\0\u37d1\0\u37f2\0\u3813\0\u3834\0\u3855\0\u3876\0\u3897\0\u38b8" +
					"\0\u38d9\0\u38fa\0\u391b\0\u03bd\0\u393c\0\u395d\0\u397e\0\u03bd" +
					"\0\u399f\0\u39c0\0\u39e1\0\u3a02\0\u3a23\0\u3a44\0\u3a65\0\u3a86" +
					"\0\u3aa7\0\u3ac8\0\u3ae9\0\u3b0a\0\u3b2b\0\u3b4c\0\u3b6d\0\u03bd" +
					"\0\u3b8e\0\u3baf\0\u3bd0\0\u3bf1\0\u3c12\0\u3c33\0\u3c54\0\u3c75" +
					"\0\u03bd\0\u3c96\0\u3cb7\0\u3cd8\0\u3cf9\0\u3d1a\0\u3d3b\0\u3d5c" +
					"\0\u3d7d\0\u3d9e\0\u3dbf\0\u3de0\0\u3e01\0\u3e22\0\u3e43\0\u3e64" +
					"\0\u3e85\0\u3ea6\0\u3ec7\0\u3ee8\0\u3f09\0\u3f2a\0\u3f4b\0\u3f6c" +
					"\0\u3f8d\0\u3fae\0\u3fcf\0\u3ff0\0\u4011\0\u4032\0\u4053\0\u4074" +
					"\0\u4095\0\u03bd\0\u40b6\0\u40d7\0\u40f8\0\u4119\0\u03bd\0\u413a" +
					"\0\u415b\0\u417c\0\u419d\0\u41be\0\u41df\0\u4200\0\u4221\0\u4242" +
					"\0\u4263\0\u4284\0\u42a5\0\u42c6\0\u42e7\0\u4308\0\u4329\0\u434a" +
					"\0\u436b\0\u438c\0\u43ad\0\u43ce\0\u43ef\0\u4410\0\u4431\0\u4452" +
					"\0\u4473\0\u4494\0\u44b5\0\u44d6\0\u44f7\0\u4518\0\u4539\0\u455a" +
					"\0\u457b\0\u459c\0\u45bd\0\u45de\0\u45ff\0\u4620\0\u4641\0\u4662" +
					"\0\u4683\0\u46a4\0\u46c5\0\u46e6\0\u4707\0\u4728\0\u4749\0\u476a" +
					"\0\u478b\0\u47ac\0\u47cd\0\u47ee\0\u480f\0\u4830\0\u4851\0\u4872" +
					"\0\u4893\0\u48b4\0\u48d5\0\u48f6\0\u4917\0\u4938\0\u4959\0\u497a" +
					"\0\u499b\0\u49bc\0\u49dd\0\u49fe\0\u4a1f\0\u4a40\0\u4a61\0\u4a82" +
					"\0\u4aa3\0\u4ac4\0\u4ae5\0\u4b06\0\u03bd\0\u4b27\0\u4b48\0\u4b69" +
					"\0\u4b8a\0\u4bab\0\u4bcc\0\u4bed\0\u4c0e\0\u4c2f\0\u4c50\0\u4c71" +
					"\0\u4c92\0\u4cb3\0\u4cd4\0\u4cf5\0\u4d16\0\u4d37\0\u4d58\0\u4d79" +
					"\0\u4d9a\0\u4dbb\0\u4ddc\0\u4dfd\0\u4e1e\0\u4e3f\0\u4e60\0\u4e81" +
					"\0\u03bd\0\u03bd\0\u4ea2\0\u4ec3\0\u4ee4\0\u4f05\0\u4f26\0\u4f47" +
					"\0\u4f68\0\u4f89\0\u4faa\0\u4fcb\0\u4fec\0\u500d\0\u502e\0\u504f" +
					"\0\u5070\0\u5091\0\u50b2\0\u50d3\0\u50f4\0\u5115\0\u5136\0\u5157" +
					"\0\u5178\0\u5199\0\u51ba\0\u51db\0\u51fc\0\u521d\0\u523e\0\u525f" +
					"\0\u5280\0\u52a1\0\u52c2\0\u52e3\0\u5304\0\u5325\0\u5346\0\u5367" +
					"\0\u5388\0\u53a9\0\u53ca\0\u53eb\0\u540c\0\u542d\0\u544e\0\u546f" +
					"\0\u5490\0\u54b1\0\u3267\0\u54d2\0\u54f3\0\u5514\0\u5535\0\u5556" +
					"\0\u5577\0\u5598\0\u55b9\0\u55da\0\u55fb\0\u561c\0\u563d\0\u03bd" +
					"\0\u565e\0\u567f\0\u56a0\0\u56c1\0\u56e2\0\u5703\0\u5724\0\u5745" +
					"\0\u5766\0\u5787\0\u57a8\0\u57c9\0\u57ea\0\u580b\0\u582c\0\u584d" +
					"\0\u586e\0\u588f\0\u58b0\0\u58d1\0\u03bd\0\u58f2\0\u5913\0\u5934" +
					"\0\u5955\0\u5976\0\u5997\0\u59b8\0\u59d9\0\u59fa\0\u5a1b\0\u5a3c" +
					"\0\u5a5d\0\u5a7e\0\u5a9f\0\u5ac0\0\u5ae1\0\u5b02\0\u5b23\0\u5b44" +
					"\0\u5b65\0\u5b86\0\u5ba7\0\u5bc8\0\u5be9\0\u5c0a\0\u5c2b\0\u5c4c" +
					"\0\u5c6d\0\u5c8e\0\u5caf\0\u5cd0\0\u5cf1\0\u5d12\0\u5d33\0\u5d54" +
					"\0\u5d75\0\u5d96\0\u5db7\0\u5dd8\0\u5df9\0\u5e1a\0\u5e3b\0\u5e5c" +
					"\0\u5e7d\0\u03bd\0\u5e9e\0\u5ebf\0\u5ee0\0\u5f01\0\u5f22\0\u5f43" +
					"\0\u5f64\0\u5f85\0\u5fa6\0\u5fc7\0\u5fe8\0\u6009\0\u602a\0\u604b" +
					"\0\u606c\0\u608d\0\u60ae\0\u60cf\0\u60f0\0\u6111\0\u6132\0\u6153" +
					"\0\u6174\0\u6195\0\u61b6\0\u61d7\0\u61f8\0\u6219\0\u623a\0\u625b" +
					"\0\u627c\0\u629d\0\u03bd\0\u62be\0\u62df\0\u6300\0\u6321\0\u6342" +
					"\0\u6363\0\u6384\0\u63a5\0\u63c6\0\u63e7\0\u6408\0\u6429\0\u644a" +
					"\0\u646b\0\u03bd\0\u648c\0\u64ad\0\u64ce\0\u64ef\0\u6510\0\u6531" +
					"\0\u03bd\0\u6552\0\u6573\0\u6594\0\u65b5\0\u65d6\0\u65f7\0\u03bd" +
					"\0\u6618\0\u03bd\0\u6639\0\u665a\0\u667b\0\u669c\0\u66bd\0\u66de" +
					"\0\u66ff\0\u6720\0\u6741\0\u6762\0\u6783\0\u67a4\0\u67c5\0\u67e6" +
					"\0\u6807\0\u6828\0\u6849\0\u686a\0\u688b\0\u68ac\0\u68cd\0\u68ee" +
					"\0\u690f\0\u6930\0\u6951\0\u6972\0\u6993\0\u69b4\0\u69d5\0\u69f6" +
					"\0\u6a17\0\u6a38\0\u6a59\0\u6a7a\0\u6a9b\0\u6abc\0\u6add\0\u6afe" +
					"\0\u6b1f\0\u6b40\0\u6b61\0\u6b82\0\u6ba3\0\u6bc4\0\u6be5\0\u6c06" +
					"\0\u6c27\0\u6c48\0\u6c69\0\u6c8a\0\u6cab\0\u6ccc\0\u6ced\0\u6d0e" +
					"\0\u6d2f\0\u6d50\0\u6d71\0\u6d92\0\u6db3\0\u6dd4\0\u6df5\0\u6e16" +
					"\0\u6e37\0\u6e58\0\u6e79\0\u6e9a\0\u6ebb\0\u6edc\0\u6efd\0\u6f1e" +
					"\0\u6f3f\0\u6f60\0\u6f81\0\u6fa2\0\u6fc3\0\u6fe4\0\u7005\0\u7026" +
					"\0\u7047\0\u7068\0\u7089\0\u70aa\0\u70cb\0\u70ec\0\u710d\0\u712e" +
					"\0\u714f\0\u03bd\0\u7170\0\u7191\0\u71b2\0\u71d3\0\u71f4\0\u7215" +
					"\0\u7236\0\u03bd\0\u7257\0\u7278\0\u7299\0\u72ba\0\u72db\0\u03bd" +
					"\0\u72fc\0\u731d\0\u733e\0\u03bd\0\u735f\0\u7380\0\u73a1\0\u73c2" +
					"\0\u73e3\0\u7404\0\u7425\0\u7446\0\u7467\0\u7488\0\u74a9\0\u74ca" +
					"\0\u74eb\0\u750c\0\u752d\0\u754e\0\u756f\0\u7590\0\u75b1\0\u75d2" +
					"\0\u75f3\0\u7614\0\u7635\0\u7656\0\u7677\0\u7698\0\u03bd\0\u76b9" +
					"\0\u76da\0\u03bd\0\u76fb\0\u771c\0\u773d\0\u775e\0\u777f\0\u03bd" +
					"\0\u77a0\0\u77c1\0\u77e2\0\u7803\0\u03bd\0\u7824\0\u7845\0\u7866" +
					"\0\u7887\0\u78a8\0\u78c9\0\u03bd\0\u78ea\0\u790b\0\u792c\0\u794d" +
					"\0\u796e\0\u798f\0\u79b0\0\u79d1\0\u79f2\0\u03bd\0\u7a13\0\u7a34" +
					"\0\u7a55\0\u7a76\0\u7a97\0\u03bd\0\u7ab8\0\u7ad9\0\u7afa\0\u7b1b" +
					"\0\u7b3c\0\u7b5d\0\u7b7e\0\u7b9f\0\u7bc0\0\u7be1\0\u7c02\0\u7c23" +
					"\0\u03bd\0\u03bd\0\u03bd\0\u7c44\0\u7c65\0\u7c86\0\u7ca7\0\u7cc8" +
					"\0\u03bd\0\u7ce9\0\u03bd\0\u7d0a\0\u7d2b\0\u03bd\0\u7d4c\0\u7d6d" +
					"\0\u7d8e\0\u6d71\0\u7daf\0\u03bd\0\u7dd0\0\u7df1\0\u7e12\0\u03bd" +
					"\0\u03bd\0\u7e33\0\u7e54\0\u7e75\0\u03bd\0\u7e96\0\u03bd\0\u03bd" +
					"\0\u7eb7\0\u03bd\0\u7ed8\0\u7ef9\0\u03bd";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[1061];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10" +
					"\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20" +
					"\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" +
					"\1\31\1\32\1\33\1\34\1\35\2\0\2\36\2\0" +
					"\1\37\1\0\1\40\7\0\1\41\4\0\1\42\24\0" +
					"\1\43\7\0\1\44\1\0\1\45\1\46\24\0\1\47" +
					"\1\0\1\50\5\0\1\51\25\0\1\52\1\0\1\53" +
					"\1\0\1\54\1\0\1\55\3\0\1\56\2\0\1\57" +
					"\1\0\1\60\1\61\1\62\2\0\1\63\3\0\1\64" +
					"\11\0\1\65\1\0\1\66\1\0\1\67\12\0\1\70" +
					"\20\0\1\71\3\0\1\72\4\0\1\73\5\0\1\74" +
					"\22\0\1\75\1\76\1\77\1\0\1\100\5\0\1\101" +
					"\4\0\1\102\1\0\1\103\17\0\1\104\1\0\1\105" +
					"\16\0\1\106\21\0\1\107\7\0\1\110\26\0\1\111" +
					"\1\112\1\113\1\0\1\114\5\0\1\115\4\0\1\116" +
					"\1\0\1\117\21\0\1\120\1\0\1\121\5\0\1\122" +
					"\31\0\1\123\1\124\2\0\1\125\12\0\1\126\20\0" +
					"\1\127\40\0\1\130\43\0\1\131\2\0\1\132\4\0" +
					"\1\34\13\0\1\34\7\0\1\133\1\0\1\134\13\0" +
					"\1\135\1\136\24\0\1\137\1\0\1\140\1\141\32\0" +
					"\1\142\1\0\1\143\3\0\1\144\12\0\1\145\17\0" +
					"\1\146\40\0\1\147\1\0\1\150\40\0\1\151\3\0" +
					"\1\152\3\0\1\153\3\0\1\154\26\0\1\155\12\0" +
					"\1\156\21\0\1\157\1\0\1\160\40\0\1\161\14\0" +
					"\1\162\40\0\1\163\33\0\1\164\43\0\1\34\13\0" +
					"\1\34\42\0\1\165\47\0\1\166\4\0\1\167\35\0" +
					"\1\170\45\0\1\171\45\0\1\172\23\0\1\173\10\0" +
					"\1\174\35\0\1\175\50\0\1\176\22\0\1\177\22\0" +
					"\1\200\16\0\1\201\4\0\1\202\3\0\1\203\1\204" +
					"\2\0\1\205\1\0\1\206\33\0\1\207\27\0\1\210" +
					"\17\0\1\211\20\0\1\212\56\0\1\213\22\0\1\214" +
					"\37\0\1\215\56\0\1\216\23\0\1\217\40\0\1\220" +
					"\54\0\1\221\22\0\1\222\42\0\1\223\55\0\1\224" +
					"\41\0\1\225\36\0\1\226\31\0\1\206\30\0\1\227" +
					"\2\0\1\230\12\0\1\231\23\0\1\232\1\0\1\233" +
					"\7\0\1\234\36\0\1\235\51\0\1\236\41\0\1\237" +
					"\22\0\1\240\1\0\1\241\4\0\1\242\3\0\1\240" +
					"\33\0\1\243\37\0\1\244\35\0\1\245\34\0\1\246" +
					"\12\0\1\247\26\0\1\250\47\0\1\251\40\0\1\252" +
					"\31\0\1\253\6\0\1\254\32\0\1\255\37\0\1\256" +
					"\2\0\1\257\1\0\1\260\1\0\1\261\36\0\1\262" +
					"\50\0\1\263\32\0\1\264\27\0\1\265\4\0\1\266" +
					"\1\0\1\267\27\0\1\270\6\0\1\271\34\0\1\272" +
					"\1\273\35\0\1\274\5\0\1\275\4\0\1\276\37\0" +
					"\1\277\44\0\1\300\23\0\1\301\6\0\1\235\2\0" +
					"\1\302\27\0\1\303\4\0\1\304\33\0\1\305\56\0" +
					"\1\306\20\0\1\307\57\0\1\310\37\0\1\311\1\0" +
					"\1\312\40\0\1\313\37\0\1\102\25\0\1\314\33\0" +
					"\1\315\45\0\1\316\5\0\1\317\26\0\1\320\52\0" +
					"\1\321\32\0\1\322\10\0\1\323\24\0\1\324\40\0" +
					"\1\325\10\0\1\326\45\0\1\327\25\0\1\330\1\0" +
					"\1\331\34\0\1\332\40\0\1\333\46\0\1\334\27\0" +
					"\1\335\40\0\1\336\6\0\1\337\40\0\1\340\7\0" +
					"\1\341\22\0\1\342\43\0\1\343\11\0\1\344\27\0" +
					"\1\345\54\0\1\346\20\0\1\347\45\0\1\350\1\351" +
					"\11\0\1\352\27\0\1\353\32\0\1\354\45\0\1\355" +
					"\34\0\1\356\7\0\1\357\43\0\1\360\22\0\33\165" +
					"\1\0\1\361\1\165\1\0\1\165\1\0\1\362\4\0" +
					"\1\363\10\0\1\364\35\0\1\365\32\0\1\366\42\0" +
					"\1\367\31\0\1\370\22\0\1\371\24\0\1\372\34\0" +
					"\1\373\7\0\1\374\26\0\1\177\40\0\1\375\42\0" +
					"\1\376\60\0\1\377\17\0\1\301\37\0\1\u0100\42\0" +
					"\1\u0101\40\0\1\u0102\44\0\1\u0103\52\0\1\235\17\0" +
					"\1\u0104\61\0\1\u0105\22\0\1\u0106\36\0\1\u0107\52\0" +
					"\1\u0108\26\0\1\u0109\67\0\1\u010a\14\0\1\u010b\3\0" +
					"\1\u010c\33\0\1\u010d\53\0\1\u010e\24\0\1\u010f\51\0" +
					"\1\u0110\26\0\1\u0111\41\0\1\u0112\41\0\1\u0113\45\0" +
					"\1\235\30\0\1\u0114\22\0\1\u0115\24\0\1\u0116\54\0" +
					"\1\u0117\26\0\1\u0118\32\0\1\322\40\0\1\376\1\0" +
					"\1\301\34\0\1\u0116\56\0\1\u0119\24\0\1\u011a\54\0" +
					"\1\u011b\37\0\1\u011c\31\0\1\u011b\43\0\1\u011d\26\0" +
					"\1\u011e\22\0\1\u011f\36\0\1\u0120\35\0\1\u0121\37\0" +
					"\1\u0122\26\0\1\u0123\41\0\1\u0124\52\0\1\u0125\25\0" +
					"\1\u0126\42\0\1\u0127\36\0\1\u0128\41\0\1\u0129\55\0" +
					"\1\u012a\24\0\1\u012b\51\0\1\u012c\23\0\1\u012d\44\0" +
					"\1\322\1\0\1\u012e\44\0\1\u012f\26\0\1\u0130\50\0" +
					"\1\u0131\33\0\1\u0132\2\0\1\u0133\42\0\1\u0134\36\0" +
					"\1\201\2\0\1\u0135\6\0\1\u0136\40\0\1\u0137\24\0" +
					"\1\u0138\5\0\1\u0139\43\0\1\u013a\35\0\1\u013b\5\0" +
					"\1\u013c\2\0\1\u013d\25\0\1\u013e\4\0\1\323\41\0" +
					"\1\u013f\32\0\1\u0140\3\0\1\322\36\0\1\u0141\27\0" +
					"\1\u0142\37\0\1\u0143\43\0\1\u0142\35\0\1\u0144\42\0" +
					"\1\u0145\36\0\1\u0146\3\0\1\u0147\34\0\1\u0148\37\0" +
					"\1\270\54\0\1\u0149\30\0\1\u014a\46\0\1\u014b\36\0" +
					"\1\u014c\32\0\1\u014a\54\0\1\323\30\0\1\131\2\0" +
					"\1\132\42\0\1\u014d\45\0\1\u014e\23\0\1\u014f\53\0" +
					"\1\u0150\34\0\1\u0151\31\0\1\u0152\37\0\1\301\6\0" +
					"\1\235\1\0\1\376\46\0\1\u0153\41\0\1\u0154\17\0" +
					"\1\u0155\40\0\1\u0156\37\0\1\u0157\44\0\1\u0158\47\0" +
					"\1\u0159\36\0\1\u015a\27\0\1\u015b\22\0\1\u015c\24\0" +
					"\1\u015d\32\0\1\u015e\43\0\1\u015f\42\0\1\u0160\35\0" +
					"\1\u0161\40\0\1\u0162\50\0\1\u0161\40\0\1\u0163\40\0" +
					"\1\u0164\27\0\1\u0165\16\0\1\u0166\23\0\1\u0167\34\0" +
					"\1\u0168\22\0\1\u0169\50\0\1\u016a\10\0\1\u016b\35\0" +
					"\1\362\45\0\1\u016c\34\0\1\u016d\3\0\1\u016d\35\0" +
					"\1\u016e\43\0\1\u016f\34\0\1\u0170\46\0\1\u0171\34\0" +
					"\1\u0172\53\0\1\u0173\31\0\1\373\47\0\1\u0174\26\0" +
					"\1\u0175\47\0\1\u0176\27\0\1\u0177\42\0\1\u0178\40\0" +
					"\1\u0175\4\0\1\u013e\32\0\1\u0179\36\0\1\u017a\42\0" +
					"\1\u017b\54\0\1\u017c\23\0\1\u017d\55\0\1\u017e\30\0" +
					"\1\u017f\51\0\1\u0180\21\0\1\u014a\40\0\1\u0181\46\0" +
					"\1\u0182\31\0\1\u0183\22\0\1\u0184\30\0\1\u0185\27\0" +
					"\1\u0186\55\0\1\u0187\26\0\1\u0188\42\0\1\u0189\32\0" +
					"\1\u018a\46\0\1\u018b\32\0\1\u018c\46\0\1\u018d\32\0" +
					"\1\u018e\43\0\1\u018f\41\0\1\u018e\33\0\1\u0190\22\0" +
					"\1\u0191\24\0\1\u0192\32\0\1\u0193\46\0\1\u0194\36\0" +
					"\1\u0130\33\0\1\u015b\22\0\1\u0195\16\0\1\u0123\37\0" +
					"\1\u0196\22\0\1\u0197\26\0\1\u0198\33\0\1\u0199\36\0" +
					"\1\245\57\0\1\u019a\24\0\1\u019b\42\0\1\72\31\0" +
					"\1\u0168\22\0\1\u019c\24\0\1\u019d\32\0\1\u019e\56\0" +
					"\1\u019f\37\0\1\u01a0\44\0\1\u01a1\34\0\1\323\2\0" +
					"\1\u01a2\26\0\1\u01a3\36\0\1\322\12\0\1\201\27\0" +
					"\1\u01a4\40\0\1\u01a5\44\0\1\u01a6\36\0\1\u01a7\27\0" +
					"\1\u01a8\22\0\1\u01a9\16\0\1\u01aa\40\0\1\u01ab\52\0" +
					"\1\u01ac\40\0\1\u01ad\30\0\1\u01ae\50\0\1\u01af\37\0" +
					"\1\u01b0\44\0\1\u01b1\41\0\1\u01b2\25\0\1\u0147\52\0" +
					"\1\u01b3\40\0\1\u01b4\34\0\1\u01b5\55\0\1\u014a\14\0" +
					"\1\u01b6\54\0\1\u01b7\40\0\1\u01b8\40\0\1\u01b9\21\0" +
					"\1\u01ba\22\0\1\u01bb\22\0\1\u01bc\35\0\1\u01bd\37\0" +
					"\1\u01be\42\0\1\u01bf\53\0\1\u01c0\23\0\1\u01c1\40\0" +
					"\1\u01c2\45\0\1\u01c3\43\0\1\u01c4\30\0\1\u01c5\46\0" +
					"\1\u01c6\32\0\1\u01c7\40\0\1\u01c8\43\0\1\u01c9\43\0" +
					"\1\u01ca\42\0\1\u01cb\34\0\1\u01cc\50\0\1\u01cd\34\0" +
					"\1\235\1\0\1\u01ad\26\0\1\u01ce\46\0\1\u01cf\35\0" +
					"\1\u01d0\52\0\1\363\22\0\1\u01d1\4\0\1\u01d2\10\0" +
					"\1\u01d3\51\0\1\u01d4\24\0\1\u01d5\27\0\1\173\44\0" +
					"\1\u01d6\2\0\1\u01d7\5\0\1\u01d8\21\0\1\u01d9\22\0" +
					"\1\u01da\36\0\1\u01db\24\0\1\u01dc\54\0\1\u01dd\22\0" +
					"\1\u01dc\53\0\1\u01de\31\0\1\u01df\32\0\1\u01e0\44\0" +
					"\1\u01e1\45\0\1\u01e2\41\0\1\u01e3\37\0\1\u01e4\27\0" +
					"\1\u01e5\46\0\1\u01e6\36\0\1\u01c7\46\0\1\u01e7\31\0" +
					"\1\u017d\41\0\1\u01e8\62\0\1\u01e9\24\0\1\u01ea\43\0" +
					"\1\u01eb\27\0\1\u01ec\54\0\1\u01ed\20\0\1\u01ee\46\0" +
					"\1\u01ef\32\0\1\u01f0\66\0\1\u01f1\24\0\1\u01f2\34\0" +
					"\1\u01f3\32\0\1\u01f4\46\0\1\u01f5\44\0\1\u01f6\40\0" +
					"\1\u01f7\30\0\1\322\7\0\1\u01f8\34\0\1\u01f9\40\0" +
					"\1\u01fa\40\0\1\u01fb\44\0\1\u01fc\27\0\1\u01fd\1\0" +
					"\1\u01fe\1\u01ff\2\0\1\u0200\1\u0201\1\u0202\5\0\1\u0203" +
					"\1\u0204\6\0\1\u0205\13\0\1\u0206\42\0\1\u0207\34\0" +
					"\1\u01fb\1\0\1\u01fb\36\0\1\u0208\44\0\1\301\35\0" +
					"\1\u01cc\37\0\1\u0138\40\0\1\u0209\46\0\1\u020a\47\0" +
					"\1\u020b\26\0\1\u01aa\37\0\1\u020c\45\0\1\u020d\7\0" +
					"\1\u020e\22\0\1\u020f\1\0\1\u0210\1\u0211\46\0\1\u0212" +
					"\25\0\1\u0213\22\0\1\u0214\15\0\1\u0215\22\0\1\u0216" +
					"\15\0\1\u0217\22\0\1\u0218\16\0\1\u0219\41\0\1\u021a" +
					"\43\0\1\u021b\34\0\1\u01b9\40\0\1\u021c\46\0\1\u021d" +
					"\40\0\1\u021e\32\0\1\u021f\55\0\1\u0220\22\0\1\u0221" +
					"\22\0\1\u0222\21\0\1\u0156\40\0\1\u0223\37\0\1\u01c7" +
					"\50\0\1\u0224\54\0\1\u0225\24\0\1\u0226\43\0\1\u0227" +
					"\35\0\1\u0228\26\0\1\u0164\40\0\1\u0229\66\0\1\u022a" +
					"\24\0\1\u022b\32\0\1\u022c\34\0\1\u022d\37\0\1\u01d1" +
					"\45\0\1\u022e\53\0\1\u022f\23\0\1\u0230\36\0\1\u0231" +
					"\44\0\1\u0232\52\0\1\135\22\0\1\u0233\46\0\1\u0234" +
					"\32\0\1\u0235\52\0\1\u0236\25\0\1\u0237\22\0\1\u0238" +
					"\30\0\1\u0239\31\0\1\u023a\41\0\1\u01e0\36\0\1\u023b" +
					"\42\0\1\u023c\62\0\1\u023d\24\0\1\u023e\26\0\1\u017d" +
					"\55\0\1\u023f\42\0\1\u0240\23\0\1\u0241\35\0\1\u0242" +
					"\22\0\1\u0243\21\0\1\u0244\37\0\1\u0245\64\0\1\u0246" +
					"\24\0\1\u0247\45\0\1\u0248\23\0\1\u0249\50\0\1\u024a" +
					"\54\0\1\u024b\24\0\1\u024c\26\0\1\u01f9\50\0\1\u01f6" +
					"\31\0\1\u020f\1\0\1\u0210\1\u0211\3\0\1\u024d\1\u024e" +
					"\5\0\1\u024f\1\u0250\32\0\1\u0251\33\0\1\u0252\2\0" +
					"\1\u0253\5\0\1\u0254\22\0\1\u019d\42\0\1\u0255\7\0" +
					"\1\u0256\32\0\1\u0257\12\0\1\u0258\24\0\1\u0259\4\0" +
					"\1\u025a\32\0\1\u025b\36\0\1\u025c\1\0\1\u025d\7\0" +
					"\1\u025e\4\0\1\u025f\25\0\1\u0260\5\0\1\u0261\31\0" +
					"\1\u0262\43\0\1\u0263\51\0\1\u0264\41\0\1\u0265\35\0" +
					"\1\u0266\34\0\1\u0267\55\0\1\u0268\24\0\1\u0269\25\0" +
					"\1\u026a\22\0\1\u026b\21\0\1\u026c\37\0\1\u026d\45\0" +
					"\1\u020d\33\0\1\u026e\7\0\1\u026f\45\0\1\u0270\31\0" +
					"\1\u0271\41\0\1\u0272\27\0\1\u0273\46\0\1\u0274\32\0" +
					"\1\u0275\46\0\1\u0276\32\0\1\u0277\46\0\1\u0278\47\0" +
					"\1\u0279\26\0\1\u027a\63\0\1\u027b\24\0\1\u027c\32\0" +
					"\1\u021f\33\0\1\u027d\22\0\1\u027e\16\0\1\u027f\46\0" +
					"\1\u0280\43\0\1\u0185\33\0\1\u0281\53\0\1\u0282\23\0" +
					"\1\u0283\35\0\1\u0284\22\0\1\u0285\21\0\1\u0286\53\0" +
					"\1\u01cc\41\0\1\u0287\23\0\1\u0288\37\0\1\u0289\40\0" +
					"\1\u028a\54\0\1\u01d2\24\0\1\u028b\61\0\1\u028c\24\0" +
					"\1\241\40\0\1\271\60\0\1\u028d\24\0\1\u028e\43\0" +
					"\1\u028f\23\0\1\u0290\40\0\1\u0291\46\0\1\u0292\36\0" +
					"\1\u016d\51\0\1\u0293\41\0\1\u01dc\37\0\1\176\42\0" +
					"\1\u0294\23\0\1\u0295\43\0\1\u0296\34\0\1\u0297\61\0" +
					"\1\u0298\16\0\1\u0299\46\0\1\u029a\47\0\1\u029b\24\0" +
					"\1\u029c\56\0\1\u029d\23\0\1\u029e\37\0\1\u029f\61\0" +
					"\1\u02a0\20\0\1\u02a1\55\0\1\u02a2\23\0\1\u02a3\50\0" +
					"\1\u02a4\4\0\1\u02a5\25\0\1\u02a6\37\0\1\u02a7\43\0" +
					"\1\u02a8\34\0\1\u02a9\36\0\1\u02aa\44\0\1\u02ab\52\0" +
					"\1\u02ac\23\0\1\u02ad\10\0\1\u02ae\5\0\1\u02ad\22\0" +
					"\1\u02af\45\0\1\u02ad\33\0\1\u02b0\46\0\1\u02b1\51\0" +
					"\1\u02b2\31\0\1\u02b3\46\0\1\u02b4\26\0\1\u02b5\35\0" +
					"\1\u02b6\35\0\1\u02b7\41\0\1\u02b8\6\0\1\u02b1\32\0" +
					"\1\u02b9\37\0\1\u01fd\1\0\1\u01fe\1\u02ba\2\0\1\u0200" +
					"\1\u0201\1\u0202\3\0\1\u02bb\1\0\1\u0203\1\u0204\6\0" +
					"\1\u0205\13\0\1\u02bc\50\0\1\u02bd\30\0\1\u02be\37\0" +
					"\1\u02bf\1\0\1\u02c0\1\u02c1\2\0\1\u02c2\1\u02c3\1\u02c4" +
					"\5\0\1\u02c5\1\u02c6\6\0\1\u02c7\11\0\1\u016a\3\0" +
					"\1\u02c8\53\0\1\u02c9\23\0\1\u02ca\36\0\1\u02cb\46\0" +
					"\1\u02cc\52\0\1\u02cd\32\0\1\u02a6\30\0\1\210\40\0" +
					"\1\230\57\0\1\u02a7\23\0\1\u0179\62\0\1\u02ce\24\0" +
					"\1\u02cf\54\0\1\u02d0\24\0\1\u02d1\54\0\1\u02d2\24\0" +
					"\1\u02d3\25\0\1\u02d4\22\0\1\u02d5\33\0\1\u02d6\42\0" +
					"\1\u02d7\23\0\1\u02d8\36\0\1\u02d9\46\0\1\u02da\60\0" +
					"\1\u02db\24\0\1\u02dc\31\0\1\u02dd\36\0\1\u02de\61\0" +
					"\1\u02df\16\0\1\u02e0\46\0\1\u02e1\34\0\1\u01c9\37\0" +
					"\1\u02e2\61\0\1\u02e3\26\0\1\u02e4\30\0\1\u02e5\57\0" +
					"\1\u02e6\23\0\1\u02e7\43\0\1\131\2\0\1\132\15\0" +
					"\1\u02e8\15\0\1\u01dc\63\0\1\u02e9\24\0\1\u02ea\25\0" +
					"\1\u02eb\22\0\1\u02ec\17\0\1\u02ed\61\0\1\u02ee\30\0" +
					"\1\u01f0\36\0\1\u02ef\30\0\1\u02f0\66\0\1\u02f1\24\0" +
					"\1\u02f2\25\0\1\u02f3\22\0\1\u02f4\30\0\1\u02f5\27\0" +
					"\1\u02f6\61\0\1\u02f7\26\0\1\u02f8\30\0\1\u02f9\62\0" +
					"\1\u02fa\17\0\1\u02fb\61\0\1\u02fc\21\0\1\u02fd\35\0" +
					"\1\u02fe\41\0\1\322\43\0\1\322\36\0\1\u02a6\60\0" +
					"\1\u02ff\24\0\1\u0300\40\0\1\u0301\32\0\1\u0302\42\0" +
					"\1\u0303\37\0\1\u02b8\57\0\1\u02b1\27\0\1\u02b1\33\0" +
					"\1\u02b8\40\0\1\u0303\1\0\1\u02b8\37\0\1\u0304\41\0" +
					"\1\u0305\40\0\1\u02b8\44\0\1\u0306\36\0\1\u02ad\11\0" +
					"\1\u025d\21\0\1\u01fd\1\0\1\u01fe\1\u01ff\2\0\1\u0200" +
					"\1\u0201\1\u0202\3\0\1\u02bb\1\0\1\u0203\1\u0204\6\0" +
					"\1\u0205\21\0\1\u0307\3\0\1\u02b8\25\0\1\u01fd\1\0" +
					"\1\u0308\1\u01ff\2\0\1\u0200\1\u0309\1\u0202\3\0\1\u02bb" +
					"\1\0\1\u0203\1\u0204\6\0\1\u0205\12\0\1\u02b8\6\0" +
					"\1\u02b1\1\0\1\u0303\31\0\1\u0259\36\0\1\u030a\41\0" +
					"\1\u030b\7\0\1\u026f\32\0\1\u030c\12\0\1\u0270\24\0" +
					"\1\72\4\0\1\u030d\32\0\1\u030e\36\0\1\111\11\0" +
					"\1\u030f\4\0\1\u0310\25\0\1\u0311\5\0\1\u0312\31\0" +
					"\1\137\43\0\1\u0313\51\0\1\u0314\22\0\1\u0315\61\0" +
					"\1\u0316\44\0\1\u0317\24\0\1\u0318\32\0\1\u0319\53\0" +
					"\1\u031a\23\0\1\u031b\55\0\1\u031c\23\0\1\u031d\55\0" +
					"\1\u031e\23\0\1\u031f\36\0\1\u0320\46\0\1\u0321\31\0" +
					"\1\u0322\22\0\1\u0323\17\0\1\u0324\61\0\1\u0325\44\0" +
					"\1\u0326\24\0\1\u0327\45\0\1\u0328\23\0\1\u0329\46\0" +
					"\1\u032a\30\0\1\u032b\66\0\1\u032c\24\0\1\u032d\36\0" +
					"\1\u032e\30\0\1\u032f\57\0\1\u0330\36\0\1\u0331\24\0" +
					"\1\u0332\61\0\1\u0333\33\0\1\u0334\42\0\1\u0335\23\0" +
					"\1\u0336\36\0\1\u0337\46\0\1\u0338\42\0\1\u0339\30\0" +
					"\1\u033a\57\0\1\u033b\36\0\1\u033c\42\0\1\u033d\23\0" +
					"\1\u033e\36\0\1\u033f\46\0\1\u0340\33\0\1\u0341\47\0" +
					"\1\u0342\30\0\1\u0343\57\0\1\u0344\36\0\1\u0345\23\0" +
					"\1\u0346\50\0\1\u0347\30\0\1\u0348\50\0\1\u02a7\50\0" +
					"\1\u0349\20\0\1\u034a\42\0\1\u034b\46\0\1\u034c\37\0" +
					"\1\u034d\34\0\1\u034e\55\0\1\u034f\26\0\1\u0259\36\0" +
					"\1\u02b8\12\0\1\u02ad\33\0\1\u0350\32\0\1\u0257\3\0" +
					"\1\u02b1\6\0\1\u0258\21\0\1\u025c\1\0\1\u025d\7\0" +
					"\1\u025e\4\0\1\u025f\1\0\1\u02b2\20\0\1\201\10\0" +
					"\1\u02a6\5\0\1\201\27\0\1\201\52\0\1\u0351\31\0" +
					"\1\261\31\0\1\273\35\0\1\u0352\41\0\1\322\6\0" +
					"\1\235\32\0\1\303\40\0\1\u0353\50\0\1\u0354\36\0" +
					"\1\u0355\30\0\1\u0356\57\0\1\u0357\23\0\1\u0358\37\0" +
					"\1\u0359\40\0\1\u035a\61\0\1\u035b\17\0\1\u035c\61\0" +
					"\1\u035d\17\0\1\u035e\61\0\1\u035f\44\0\1\u0360\24\0" +
					"\1\u0361\26\0\1\u0362\46\0\1\u0363\42\0\1\u0364\30\0" +
					"\1\u0365\57\0\1\u0366\23\0\1\u0367\37\0\1\u0368\61\0" +
					"\1\u0369\35\0\1\u036a\40\0\1\u036b\23\0\1\u036c\55\0" +
					"\1\u036d\36\0\1\u036e\41\0\1\u036f\21\0\1\370\51\0" +
					"\1\u0370\30\0\1\u0371\41\0\1\u020f\1\0\1\u0210\1\u0211" +
					"\3\0\1\u024d\1\u024e\5\0\1\u02c5\1\u0250\21\0\1\u0372" +
					"\61\0\1\u0373\44\0\1\u0374\24\0\1\u0375\45\0\1\u0376" +
					"\37\0\1\u0377\21\0\1\u0114\42\0\1\u0378\61\0\1\u0379" +
					"\44\0\1\u037a\24\0\1\u037b\45\0\1\u037c\36\0\1\u037d" +
					"\41\0\1\u037e\21\0\1\u011e\56\0\1\u037f\42\0\1\u0380" +
					"\27\0\1\u02a7\35\0\1\u0381\56\0\1\u0382\21\0\1\u0383" +
					"\56\0\1\u0384\22\0\1\u02b8\7\0\1\u0385\27\0\1\u0386" +
					"\1\0\1\u0387\1\u0388\36\0\1\376\1\0\1\322\42\0" +
					"\1\201\11\0\1\u0349\21\0\1\322\6\0\1\235\1\0" +
					"\1\376\31\0\1\72\54\0\1\u0389\36\0\1\u038a\24\0" +
					"\1\u038b\61\0\1\u038c\33\0\1\u038d\33\0\1\u038e\30\0" +
					"\1\u038f\50\0\1\u0390\30\0\1\u0391\50\0\1\u0392\30\0" +
					"\1\u0393\57\0\1\u0394\23\0\1\u0395\64\0\1\u0396\24\0" +
					"\1\u0397\45\0\1\u0398\36\0\1\u0399\24\0\1\u039a\61\0" +
					"\1\u039b\26\0\1\u039c\30\0\1\u039d\56\0\1\u039e\23\0" +
					"\1\u039f\61\0\1\u03a0\34\0\1\u03a1\21\0\1\u0168\41\0" +
					"\1\u03a2\57\0\1\u03a3\36\0\1\u03a4\33\0\1\u03a5\30\0" +
					"\1\u03a6\57\0\1\u03a7\23\0\1\u03a8\54\0\1\u03a9\22\0" +
					"\1\u03aa\50\0\1\u03ab\30\0\1\u03ac\57\0\1\u03ad\23\0" +
					"\1\u03ae\54\0\1\u03af\21\0\1\u0190\41\0\1\u03b0\37\0" +
					"\1\u015b\57\0\1\u03b1\42\0\1\u03b2\22\0\1\u03b3\37\0" +
					"\1\u03b4\37\0\1\u03b5\41\0\1\u0386\1\0\1\u0387\1\u0388" +
					"\3\0\1\u03b6\1\u03b7\5\0\1\u03b8\1\u03b9\22\0\1\u03ba" +
					"\7\0\1\u0256\45\0\1\u0258\31\0\1\u03bb\46\0\1\u03bc" +
					"\21\0\1\u01a8\51\0\1\u03bd\30\0\1\u03be\41\0\1\u02bf" +
					"\1\0\1\u02c0\1\u02c1\1\131\1\0\1\u02c2\1\u03bf\1\u02c4" +
					"\5\0\1\u02c5\1\u02c6\6\0\1\u02c7\30\0\1\u03c0\36\0" +
					"\1\u03c1\42\0\1\u03c2\36\0\1\u03c3\42\0\1\u03c4\36\0" +
					"\1\u03c5\24\0\1\u03c6\61\0\1\u03c7\35\0\1\u03c8\23\0" +
					"\1\u03c9\54\0\1\u03ca\21\0\1\u01ba\51\0\1\u03cb\30\0" +
					"\1\u03cc\57\0\1\u03cd\36\0\1\u03ce\23\0\1\u03cf\50\0" +
					"\1\u03d0\30\0\1\u03d1\40\0\1\u03d2\56\0\1\u03d3\21\0" +
					"\1\u01d9\60\0\1\u03d4\36\0\1\u03d5\24\0\1\u03d6\61\0" +
					"\1\u03d7\16\0\1\u03d8\57\0\1\u03d9\36\0\1\u03da\24\0" +
					"\1\u03db\61\0\1\u03dc\16\0\1\u03dd\40\0\1\u03de\42\0" +
					"\1\u03df\56\0\1\u034d\21\0\1\u01fd\1\0\1\u01fe\1\u01ff" +
					"\2\0\1\u0200\1\u0201\1\u0202\3\0\1\u03e0\1\0\1\u0203" +
					"\1\u0204\6\0\1\u0205\23\0\1\u03e1\4\0\1\u03e2\25\0" +
					"\1\u02ae\37\0\1\u02b5\43\0\1\u03e3\44\0\1\u02ae\47\0" +
					"\1\u02b5\17\0\1\u03e4\57\0\1\u03e5\36\0\1\u03e6\23\0" +
					"\1\111\3\0\1\314\5\0\1\u030f\4\0\1\u0310\37\0" +
					"\1\u03e7\21\0\1\u0213\57\0\1\u03e8\21\0\1\u0215\57\0" +
					"\1\u03e9\21\0\1\u0217\51\0\1\u03ea\30\0\1\u03eb\41\0" +
					"\1\u03ec\61\0\1\u03ed\16\0\1\u03ee\57\0\1\u03ef\36\0" +
					"\1\u03f0\41\0\1\u03f1\21\0\1\u0221\60\0\1\u03f2\36\0" +
					"\1\u03f3\23\0\1\u03f4\56\0\1\u03f5\21\0\1\u0237\51\0" +
					"\1\u03f6\30\0\1\u03f7\56\0\1\u03f8\21\0\1\u0242\51\0" +
					"\1\u03f9\30\0\1\u03fa\55\0\1\u03fb\24\0\1\u03fc\40\0" +
					"\1\u01fd\1\0\1\u01fe\1\u01ff\2\0\1\u0200\1\u0201\1\u0202" +
					"\5\0\1\u0203\1\u0204\5\0\1\u03fd\1\u0205\14\0\1\u03fe" +
					"\35\0\1\u03ff\42\0\1\u02ae\54\0\1\u0400\21\0\1\u026a" +
					"\41\0\1\u0401\40\0\1\u0402\40\0\1\u0403\57\0\1\u0404" +
					"\36\0\1\u0405\33\0\1\u0406\30\0\1\u0407\56\0\1\u0408" +
					"\21\0\1\u027d\41\0\1\u0409\56\0\1\u040a\21\0\1\u0284" +
					"\41\0\1\u040b\57\0\1\u040c\36\0\1\u040d\23\0\1\u040e" +
					"\57\0\1\u040f\36\0\1\u0410\45\0\1\u0411\30\0\1\u0412" +
					"\43\0\1\u0413\33\0\1\u02b5\50\0\1\u025d\20\0\1\u0414" +
					"\56\0\1\u0415\21\0\1\u02d4\60\0\1\u0416\36\0\1\u0417" +
					"\23\0\1\u0418\40\0\1\u0419\56\0\1\u041a\21\0\1\u02eb" +
					"\57\0\1\u041b\21\0\1\u02f3\47\0\1\u041c\33\0\1\u0386" +
					"\1\0\1\u0387\1\u0388\3\0\1\u03b6\1\u03b7\5\0\1\u0203" +
					"\1\u03b9\20\0\1\u041d\56\0\1\u041e\21\0\1\u0322\41\0" +
					"\1\u041f\40\0\1\u0420\52\0\1\u0421\26\0\1\u0422\42\0" +
					"\1\u0423\60\0\1\u0424\16\0\1\u0425\36\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[32538];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value;
			while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
			"Unkown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\1\0\33\1\1\0\1\11\3\0\1\1\3\0\1\1" +
					"\21\0\1\1\10\0\1\1\16\0\1\1\16\0\1\1" +
					"\24\0\1\1\1\0\1\1\4\0\1\11\3\0\1\11" +
					"\43\0\1\1\1\0\1\11\3\0\1\1\12\0\1\1" +
					"\12\0\1\1\1\0\1\1\20\0\1\1\4\0\1\1" +
					"\13\0\1\11\31\0\1\1\30\0\1\11\13\0\2\11" +
					"\16\0\1\1\5\0\1\11\11\0\1\11\1\1\2\0" +
					"\1\1\1\11\1\1\1\0\1\11\12\0\1\1\1\11" +
					"\7\0\1\11\1\1\4\0\1\11\5\0\1\11\2\0" +
					"\1\11\1\1\1\11\11\0\1\11\1\1\2\0\1\11" +
					"\4\0\1\11\3\0\1\11\5\0\1\1\1\0\1\11" +
					"\16\0\1\11\14\0\1\11\1\1\6\0\1\11\3\0" +
					"\1\1\2\0\1\11\4\0\1\1\1\11\7\0\1\11" +
					"\1\1\1\11\2\0\1\11\17\0\1\11\3\0\1\11" +
					"\17\0\1\11\10\0\1\11\24\0\1\1\12\0\1\1" +
					"\1\11\4\0\1\11\25\0\1\1\4\0\1\1\11\0" +
					"\1\1\35\0\1\1\12\0\1\11\14\0\1\1\13\0" +
					"\1\1\2\0\2\11\55\0\1\1\1\0\2\1\2\0" +
					"\1\1\11\0\1\11\24\0\1\11\7\0\1\1\12\0" +
					"\1\1\10\0\1\1\20\0\1\11\40\0\1\11\3\0" +
					"\1\1\12\0\1\11\6\0\1\11\1\0\1\1\2\0" +
					"\1\1\1\0\1\11\1\0\1\11\13\0\1\1\2\0" +
					"\1\1\13\0\1\1\13\0\1\1\21\0\1\1\13\0" +
					"\1\1\1\0\1\1\1\0\1\1\11\0\1\1\4\0" +
					"\1\11\3\0\1\1\3\0\1\11\1\0\1\1\3\0" +
					"\1\11\3\0\1\11\1\1\10\0\1\1\15\0\1\1" +
					"\2\0\1\11\1\0\1\1\1\11\5\0\1\11\4\0" +
					"\1\11\2\0\1\1\3\0\1\11\6\0\1\1\2\0" +
					"\1\11\5\0\1\11\2\0\1\1\2\0\1\1\6\0" +
					"\3\11\3\0\1\1\1\0\1\11\1\0\1\11\2\0" +
					"\1\11\5\0\1\11\3\0\2\11\3\0\1\11\1\0" +
					"\2\11\1\0\1\11\2\0\1\11";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[1061];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * the input device
	 */
	private Reader zzReader;

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * number of newlines encountered up to the start of the matched text
	 */
	private int yyline;

	/**
	 * the number of characters up to the start of the matched text
	 */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/* user code: */

	/* store a reference to the parser object */
	private Sintactico yyparser;

	/* Guardar una cadena temporal para el numero */
	private String numeroS;

	/* constructor taking an additional parser */
	public TokensLex(Reader r, Sintactico yyparser) {
		this(r);
		this.yyparser = yyparser;
	}

	/* return the current line number. We need this
	   because yyline is made private and we don't have
	   a mechanism like extern in C. */
	public int getLine() {
		return yyline;
	}

	public static String convert(String l) {
		int pos = -1;
		// System.out.println(l);
		if (l.toUpperCase().indexOf("PUNTO") >= 0)
			pos = l.toUpperCase().indexOf("PUNTO");
		if (l.toUpperCase().indexOf("COMA") >= 0)
			pos = l.toUpperCase().indexOf("COMA");
		if (pos > 0) {
			return convertBloque(l.substring(0, pos)) + "." + convertDecimal(l.substring(pos + 6));
		} else if (pos == 0) {
			return "0." + convertDecimal(l.substring(pos + 6));
		}
		return convertBloque(l);
	}

	private static String convertBloque(String s) {
		String[] cientos = {"CIEN", "CIENTO", "DOSCIENTOS", "TRESCIENTOS", "CUATROCIENTOS", "QUINIENTOS", "SEISCIENTOS", "SETECIENTOS", "OCHOCIENTOS", "NOVECIENTOS"};
		ArrayList<String> Cientos = new ArrayList(java.util.Arrays.asList(cientos));
		String letras = s.toUpperCase();
		String[] toks = letras.split(" ");
		int num = 0;
		for (int i = 0; i < toks.length; i++) {
			if (Cientos.indexOf(toks[i]) != -1) {
				if (toks[i].equals("CIEN")) {
					num = 100;
				} else {
					num = 100 * Cientos.indexOf(toks[i]);
				}
			} else {
				int numero = convertNums(toks[i]);
				if (numero != -1)
					num += numero;
			}
		}
		return String.valueOf(num);
	}

	private static String convertDecimal(String s) {
		String letras = s.toUpperCase();
		String[] toks = letras.split(" ");

		String contenido = "";
		int contDecena = 0;

		for (int i = 0; i < toks.length; i++) {
			int valor = convertNums(toks[i]);

			if (valor % 10 == 0 && valor >= 30) {
				if (contDecena != 0) {
					contenido += String.valueOf(contDecena);
				}
				contDecena = valor;
			} else if (valor != -1) {
				if (contDecena != 0) {
					contenido += String.valueOf(contDecena);
					contDecena = 0;
				}
				contenido += String.valueOf(valor);
			} else {
				contenido += String.valueOf(contDecena / 10);
				contDecena = 0;
			}
		}

		if (contDecena != 0) {
			contenido += String.valueOf(contDecena);
		}

		return contenido;
	}

	private static int convertNums(String s) {
		String[] unidades = {"CERO", "UNO", "DOS", "TRES", "CUATRO", "CINCO", "SEIS", "SIETE", "OCHO", "NUEVE", "DIEZ", "ONCE", "DOCE", "TRECE", "CATORCE", "QUINCE", "DIECISEIS", "DIECISIETE", "DIECIOCHO", "DIECINUEVE", "VEINTE", "VEINTIUNO", "VEINTIDOS", "VEINTITRES", "VEINTICUATRO", "VEINTICINCO", "VEINTISEIS", "VEINTISIETE", "VEINTIOCHO", "VEINTINUEVE", "UN"};
		String[] decenas = {"TREINTA", "CUARENTA", "CINCUENTA", "SESENTA", "SETENTA", "OCHENTA", "NOVENTA"};
		ArrayList<String> Unidades = new ArrayList(java.util.Arrays.asList(unidades));
		ArrayList<String> Decenas = new ArrayList(java.util.Arrays.asList(decenas));

		if (Unidades.indexOf(s) != -1) {
			if (s.equals("UN")) {
				return 1;
			} else {
				return Unidades.indexOf(s);
			}
		} else if (Decenas.indexOf(s) != -1) {
			return (Decenas.indexOf(s) + 3) * 10;
		}
		return -1;
	}


	/**
	 * Creates a new scanner
	 * There is also a java.io.InputStream version of this constructor.
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	TokensLex(Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	TokensLex(InputStream in) {
		this(new InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < 1296) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value;
			while (--count > 0);
		}
		return map;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead,
					zzBuffer, 0,
					zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char[] newBuffer = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead,
				zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}


	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws IOException {
		zzAtEOF = true;            /* indicate end of file */
		zzEndRead = zzStartRead;  /* invalidate buffer    */

		if (zzReader != null)
			zzReader.close();
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 * <p>
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>ZZ_INITIAL</tt>.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Contains user EOF-code, which will be executed exactly once,
	 * when the end of file is reached
	 */
	private void zzDoEOF() throws IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws IOException if any I/O-Error occurs
	 */
	public int yylex() throws IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
				 zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
					case '\u000B':
					case '\u000C':
					case '\u0085':
					case '\u2028':
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR)
							zzR = false;
						else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek) yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 83: {
					System.out.println("GRIEGA Iota");
					yyparser.yylval = new SintacticoVal("\\Iota");
					return Sintactico.VARIABLE;
				}
				case 97:
					break;
				case 82: {
					System.out.println("GRIEGA Alpha");
					yyparser.yylval = new SintacticoVal("\\Alpha");
					return Sintactico.VARIABLE;
				}
				case 98:
					break;
				case 29: {
					System.out.println("GRIEGA gamma");
					yyparser.yylval = new SintacticoVal("\\gamma");
					return Sintactico.VARIABLE;
				}
				case 99:
					break;
				case 1: {
					System.out.println("No se pudo reconocer la entrada " + yytext());
				}
				case 100:
					break;
				case 62: {
					System.out.println("GRIEGA upsilon");
					yyparser.yylval = new SintacticoVal("\\upsilon");
					return Sintactico.VARIABLE;
				}
				case 101:
					break;
				case 87: {
					System.out.println("GRIEGA Sigma");
					yyparser.yylval = new SintacticoVal("\\Sigma");
					return Sintactico.VARIABLE;
				}
				case 102:
					break;
				case 88: {
					System.out.println("GRIEGA Omega");
					yyparser.yylval = new SintacticoVal("\\Omega");
					return Sintactico.VARIABLE;
				}
				case 103:
					break;
				case 34: {
					System.out.println("OPMENOS");
					yyparser.yylval = new SintacticoVal("OPMENOS");
					return Sintactico.OPMENOS;
				}
				case 104:
					break;
				case 30: {
					System.out.println("VARIABLE g");
					yyparser.yylval = new SintacticoVal("g");
					return Sintactico.VARIABLE;
				}
				case 105:
					break;
				case 8: {
					this.numeroS = convert(yytext());
					System.out.println("NUMERO: " + this.numeroS);
					yyparser.yylval = new SintacticoVal(this.numeroS);
					return Sintactico.NUMERO;
				}
				case 106:
					break;
				case 79: {
					System.out.println("GRIEGA Psi");
					yyparser.yylval = new SintacticoVal("\\Psi");
					return Sintactico.VARIABLE;
				}
				case 107:
					break;
				case 66: {
					System.out.println("Cuadrado");
					yyparser.yylval = new SintacticoVal("2");
					return Sintactico.NUMERO;
				}
				case 108:
					break;
				case 58: {
					System.out.println("GRIEGA lambda");
					yyparser.yylval = new SintacticoVal("\\lambda");
					return Sintactico.VARIABLE;
				}
				case 109:
					break;
				case 56: {
					System.out.println("VARIABLE v");
					yyparser.yylval = new SintacticoVal("v");
					return Sintactico.VARIABLE;
				}
				case 110:
					break;
				case 4: {
					System.out.println("OPPOTEN");
					yyparser.yylval = new SintacticoVal("OPPOTEN");
					return Sintactico.OPPOTEN;
				}
				case 111:
					break;
				case 3: {
					System.out.println("GRIEGA mu");
					yyparser.yylval = new SintacticoVal("\\mu");
					return Sintactico.VARIABLE;
				}
				case 112:
					break;
				case 15: {
					System.out.println("GRIEGA chi");
					yyparser.yylval = new SintacticoVal("\\chi");
					return Sintactico.VARIABLE;
				}
				case 113:
					break;
				case 37: {
					System.out.println("VARIABLE n");
					yyparser.yylval = new SintacticoVal("n");
					return Sintactico.VARIABLE;
				}
				case 114:
					break;
				case 50: {
					System.out.println("VARIABLE f");
					yyparser.yylval = new SintacticoVal("f");
					return Sintactico.VARIABLE;
				}
				case 115:
					break;
				case 47: {
					System.out.println("VARIABLE u");
					yyparser.yylval = new SintacticoVal("u");
					return Sintactico.VARIABLE;
				}
				case 116:
					break;
				case 33: {
					System.out.println("VARIABLE m");
					yyparser.yylval = new SintacticoVal("m");
					return Sintactico.VARIABLE;
				}
				case 117:
					break;
				case 72: {
					System.out.println("GRIEGA zeta");
					yyparser.yylval = new SintacticoVal("\\zeta");
					return Sintactico.VARIABLE;
				}
				case 118:
					break;
				case 60: {
					System.out.println("GRIEGA epsilon");
					yyparser.yylval = new SintacticoVal("\\epsilon");
					return Sintactico.VARIABLE;
				}
				case 119:
					break;
				case 70: {
					System.out.println("GRIEGA rho");
					yyparser.yylval = new SintacticoVal("\\rho");
					return Sintactico.VARIABLE;
				}
				case 120:
					break;
				case 46: {
					System.out.println("LLAVE");
					yyparser.yylval = new SintacticoVal("{");
					return Sintactico.LLAVE;
				}
				case 121:
					break;
				case 86: {
					System.out.println("GRIEGA Gamma");
					yyparser.yylval = new SintacticoVal("\\Gamma");
					return Sintactico.VARIABLE;
				}
				case 122:
					break;
				case 6: {
					System.out.println("GRIEGA pi");
					yyparser.yylval = new SintacticoVal("\\pi");
					return Sintactico.VARIABLE;
				}
				case 123:
					break;
				case 69: {
					System.out.println("PARENTESIS");
					yyparser.yylval = new SintacticoVal("(");
					return Sintactico.PARENTESIS;
				}
				case 124:
					break;
				case 55: {
					System.out.println("VARIABLE e");
					yyparser.yylval = new SintacticoVal("e");
					return Sintactico.VARIABLE;
				}
				case 125:
					break;
				case 63: {
					System.out.println("OPMASMENOS");
					yyparser.yylval = new SintacticoVal("OPMASMENOS");
					return Sintactico.OPMASMENOS;
				}
				case 126:
					break;
				case 48: {
					System.out.println("GRIEGA theta");
					yyparser.yylval = new SintacticoVal("\\theta");
					return Sintactico.VARIABLE;
				}
				case 127:
					break;
				case 16: {
					System.out.println("GRIEGA tau");
					yyparser.yylval = new SintacticoVal("\\tau");
					return Sintactico.VARIABLE;
				}
				case 128:
					break;
				case 73: {
					System.out.println("GRIEGA Mu");
					yyparser.yylval = new SintacticoVal("\\Mu");
					return Sintactico.VARIABLE;
				}
				case 129:
					break;
				case 59: {
					System.out.println("VARIABLE t");
					yyparser.yylval = new SintacticoVal("t");
					return Sintactico.VARIABLE;
				}
				case 130:
					break;
				case 25: {
					System.out.println("GRIEGA beta");
					yyparser.yylval = new SintacticoVal("\\beta");
					return Sintactico.VARIABLE;
				}
				case 131:
					break;
				case 28: {
					System.out.println("VARIABLE l");
					yyparser.yylval = new SintacticoVal("l");
					return Sintactico.VARIABLE;
				}
				case 132:
					break;
				case 43: {
					System.out.println("VARIABLE d");
					yyparser.yylval = new SintacticoVal("d");
					return Sintactico.VARIABLE;
				}
				case 133:
					break;
				case 64: {
					System.out.println("OPMENOSMAS");
					yyparser.yylval = new SintacticoVal("OPMENOSMAS");
					return Sintactico.OPMENOSMAS;
				}
				case 134:
					break;
				case 14: {
					System.out.println("GRIEGA phi");
					yyparser.yylval = new SintacticoVal("\\phi");
					return Sintactico.VARIABLE;
				}
				case 135:
					break;
				case 68: {
					System.out.println("GRIEGA eta");
					yyparser.yylval = new SintacticoVal("\\eta");
					return Sintactico.VARIABLE;
				}
				case 136:
					break;
				case 75: {
					System.out.println("GRIEGA Pi");
					yyparser.yylval = new SintacticoVal("\\Pi");
					return Sintactico.VARIABLE;
				}
				case 137:
					break;
				case 20: {
					System.out.println("OPRAIZ");
					yyparser.yylval = new SintacticoVal("OPRAIZ");
					return Sintactico.OPRAIZ;
				}
				case 138:
					break;
				case 54: {
					System.out.println("VARIABLE s");
					yyparser.yylval = new SintacticoVal("s");
					return Sintactico.VARIABLE;
				}
				case 139:
					break;
				case 80: {
					System.out.println("GRIEGA Chi");
					yyparser.yylval = new SintacticoVal("\\Chi");
					return Sintactico.VARIABLE;
				}
				case 140:
					break;
				case 24: {
					System.out.println("GRIEGA iota");
					yyparser.yylval = new SintacticoVal("\\iota");
					return Sintactico.VARIABLE;
				}
				case 141:
					break;
				case 61: {
					System.out.println("GRIEGA omicron");
					yyparser.yylval = new SintacticoVal("o");
					return Sintactico.VARIABLE;
				}
				case 142:
					break;
				case 9: {
					System.out.println("GRIEGA xi");
					yyparser.yylval = new SintacticoVal("\\xi");
					return Sintactico.VARIABLE;
				}
				case 143:
					break;
				case 45: {
					System.out.println("IGUAL");
					yyparser.yylval = new SintacticoVal("IGUAL");
					return Sintactico.IGUAL;
				}
				case 144:
					break;
				case 95: {
					System.out.println("GRIEGA Upsilon");
					yyparser.yylval = new SintacticoVal("\\Upsilon");
					return Sintactico.VARIABLE;
				}
				case 145:
					break;
				case 27: {
					System.out.println("VARIABLE z");
					yyparser.yylval = new SintacticoVal("z");
					return Sintactico.VARIABLE;
				}
				case 146:
					break;
				case 51: {
					System.out.println("GRIEGA kappa");
					yyparser.yylval = new SintacticoVal("\\kappa");
					return Sintactico.VARIABLE;
				}
				case 147:
					break;
				case 38: {
					System.out.println("Euler");
					yyparser.yylval = new SintacticoVal("\\e");
					return Sintactico.VARIABLE;
				}
				case 148:
					break;
				case 18: {
					System.out.println("GRIEGA alpha");
					yyparser.yylval = new SintacticoVal("\\alpha");
					return Sintactico.VARIABLE;
				}
				case 149:
					break;
				case 52: {
					System.out.println("VARIABLE k");
					yyparser.yylval = new SintacticoVal("k");
					return Sintactico.VARIABLE;
				}
				case 150:
					break;
				case 42: {
					System.out.println("VARIABLE c");
					yyparser.yylval = new SintacticoVal("c");
					return Sintactico.VARIABLE;
				}
				case 151:
					break;
				case 96: {
					System.out.println("GRIEGA Rho");
					yyparser.yylval = new SintacticoVal("\\Rho");
					return Sintactico.VARIABLE;
				}
				case 152:
					break;
				case 36: {
					System.out.println("GRIEGA sigma");
					yyparser.yylval = new SintacticoVal("\\sigma");
					return Sintactico.VARIABLE;
				}
				case 153:
					break;
				case 40: {
					System.out.println("GRIEGA omega");
					yyparser.yylval = new SintacticoVal("\\omega");
					return Sintactico.VARIABLE;
				}
				case 154:
					break;
				case 77: {
					System.out.println("GRIEGA Xi");
					yyparser.yylval = new SintacticoVal("\\Xi");
					return Sintactico.VARIABLE;
				}
				case 155:
					break;
				case 21: {
					System.out.println("VARIABLE r");
					yyparser.yylval = new SintacticoVal("r");
					return Sintactico.VARIABLE;
				}
				case 156:
					break;
				case 94: {
					System.out.println("GRIEGA Omicron");
					yyparser.yylval = new SintacticoVal("O");
					return Sintactico.VARIABLE;
				}
				case 157:
					break;
				case 31: {
					System.out.println("VARIABLE j");
					yyparser.yylval = new SintacticoVal("j");
					return Sintactico.VARIABLE;
				}
				case 158:
					break;
				case 26: {
					System.out.println("VARIABLE b");
					yyparser.yylval = new SintacticoVal("b");
					return Sintactico.VARIABLE;
				}
				case 159:
					break;
				case 67: {
					System.out.println("OPFRAC");
					yyparser.yylval = new SintacticoVal("INIFRAC");
					return Sintactico.INIFRAC;
				}
				case 160:
					break;
				case 81: {
					System.out.println("GRIEGA Tau");
					yyparser.yylval = new SintacticoVal("\\Tau");
					return Sintactico.VARIABLE;
				}
				case 161:
					break;
				case 32: {
					System.out.println("VARIABLE y");
					yyparser.yylval = new SintacticoVal("y");
					return Sintactico.VARIABLE;
				}
				case 162:
					break;
				case 53: {
					System.out.println("VARIABLE q");
					yyparser.yylval = new SintacticoVal("q");
					return Sintactico.VARIABLE;
				}
				case 163:
					break;
				case 5: {
					System.out.println("GRIEGA nu");
					yyparser.yylval = new SintacticoVal("\\nu");
					return Sintactico.VARIABLE;
				}
				case 164:
					break;
				case 85: {
					System.out.println("GRIEGA Zeta");
					yyparser.yylval = new SintacticoVal("\\Zeta");
					return Sintactico.VARIABLE;
				}
				case 165:
					break;
				case 7: {
					System.out.println("de");
					yyparser.yylval = new SintacticoVal("DE");
					return Sintactico.DE;
				}
				case 166:
					break;
				case 92: {
					System.out.println("GRIEGA Lambda");
					yyparser.yylval = new SintacticoVal("\\Lambda");
					return Sintactico.VARIABLE;
				}
				case 167:
					break;
				case 78: {
					System.out.println("GRIEGA Eta");
					yyparser.yylval = new SintacticoVal("\\Eta");
					return Sintactico.VARIABLE;
				}
				case 168:
					break;
				case 44: {
					System.out.println("GRIEGA delta");
					yyparser.yylval = new SintacticoVal("\\delta");
					return Sintactico.VARIABLE;
				}
				case 169:
					break;
				case 93: {
					System.out.println("GRIEGA Epsilon");
					yyparser.yylval = new SintacticoVal("\\Epsilon");
					return Sintactico.VARIABLE;
				}
				case 170:
					break;
				case 65: {
					System.out.println("CORCHETE");
					yyparser.yylval = new SintacticoVal("[");
					return Sintactico.CORCHETE;
				}
				case 171:
					break;
				case 10: {
					System.out.println("OPMAS");
					yyparser.yylval = new SintacticoVal("OPMAS");
					return Sintactico.OPMAS;
				}
				case 172:
					break;
				case 12: {
					System.out.println("GRIEGA psi");
					yyparser.yylval = new SintacticoVal("\\psi");
					return Sintactico.VARIABLE;
				}
				case 173:
					break;
				case 90: {
					System.out.println("GRIEGA Theta");
					yyparser.yylval = new SintacticoVal("\\Theta");
					return Sintactico.VARIABLE;
				}
				case 174:
					break;
				case 23: {
					System.out.println("VARIABLE i");
					yyparser.yylval = new SintacticoVal("i");
					return Sintactico.VARIABLE;
				}
				case 175:
					break;
				case 11: {
					System.out.println("VARIABLE a");
					yyparser.yylval = new SintacticoVal("a");
					return Sintactico.VARIABLE;
				}
				case 176:
					break;
				case 91: {
					System.out.println("GRIEGA Kappa");
					yyparser.yylval = new SintacticoVal("\\Kappa");
					return Sintactico.VARIABLE;
				}
				case 177:
					break;
				case 74: {
					System.out.println("GRIEGA Nu");
					yyparser.yylval = new SintacticoVal("\\Nu");
					return Sintactico.VARIABLE;
				}
				case 178:
					break;
				case 76: {
					System.out.println("GRIEGA Phi");
					yyparser.yylval = new SintacticoVal("\\Phi");
					return Sintactico.VARIABLE;
				}
				case 179:
					break;
				case 89: {
					System.out.println("GRIEGA Delta");
					yyparser.yylval = new SintacticoVal("\\Eelta");
					return Sintactico.VARIABLE;
				}
				case 180:
					break;
				case 35: {
					System.out.println("OPDIVIDIDO");
					yyparser.yylval = new SintacticoVal("OPDIVIDIDO");
					return Sintactico.OPDIVIDIDO;
				}
				case 181:
					break;
				case 39: {
					System.out.println("VARIABLE x");
					yyparser.yylval = new SintacticoVal("x");
					return Sintactico.VARIABLE;
				}
				case 182:
					break;
				case 84: {
					System.out.println("GRIEGA Beta");
					yyparser.yylval = new SintacticoVal("\\Beta");
					return Sintactico.VARIABLE;
				}
				case 183:
					break;
				case 41: {
					System.out.println("VARIABLE p");
					yyparser.yylval = new SintacticoVal("p");
					return Sintactico.VARIABLE;
				}
				case 184:
					break;
				case 49: {
					System.out.println("VARIABLE h");
					yyparser.yylval = new SintacticoVal("h");
					return Sintactico.VARIABLE;
				}
				case 185:
					break;
				case 17: {
					System.out.println("FIN");
					yyparser.yylval = new SintacticoVal("FIN");
					return Sintactico.FIN;
				}
				case 186:
					break;
				case 13: {
					System.out.println("OPPOR");
					yyparser.yylval = new SintacticoVal("OPPOR");
					return Sintactico.OPPOR;
				}
				case 187:
					break;
				case 22: {
					System.out.println("Cubo 3");
					yyparser.yylval = new SintacticoVal("3");
					return Sintactico.NUMERO;
				}
				case 188:
					break;
				case 57: {
					System.out.println("VARIABLE w");
					yyparser.yylval = new SintacticoVal("w");
					return Sintactico.VARIABLE;
				}
				case 189:
					break;
				case 71: {
					System.out.println("Cierra agrupacion");
					yyparser.yylval = new SintacticoVal("CIERRE");
					return Sintactico.CIERRE;
				}
				case 190:
					break;
				case 19: {
					System.out.println("VARIABLE o");
					yyparser.yylval = new SintacticoVal("o");
					return Sintactico.VARIABLE;
				}
				case 191:
					break;
				case 2: {
				}
				case 192:
					break;
				default:
					if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
						zzAtEOF = true;
						zzDoEOF();
						{
							return 0;
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}


}
