package org.hitcombo.algevox2.grams;

//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";


//#line 2 "parser.y"

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
//#line 19 "Sintactico.java"


public class Sintactico {

	boolean yydebug;        //do I want debug output?
	int yynerrs;            //number of errors so far
	int yyerrflag;          //was there an error?
	int yychar;             //the current working character

	//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
	void debug(String msg) {
		if (yydebug)
			System.out.println(msg);
	}

	//########## STATE STACK ##########
	final static int YYSTACKSIZE = 500;  //maximum stack size
	int[] statestk = new int[YYSTACKSIZE]; //state stack
	int stateptr;
	int stateptrmax;                     //highest index of stackptr
	int statemax;                        //state when highest index reached

	//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
	final void state_push(int state) {
		try {
			stateptr++;
			statestk[stateptr] = state;
		} catch (ArrayIndexOutOfBoundsException e) {
			int oldsize = statestk.length;
			int newsize = oldsize * 2;
			int[] newstack = new int[newsize];
			System.arraycopy(statestk, 0, newstack, 0, oldsize);
			statestk = newstack;
			statestk[stateptr] = state;
		}
	}

	final int state_pop() {
		return statestk[stateptr--];
	}

	final void state_drop(int cnt) {
		stateptr -= cnt;
	}

	final int state_peek(int relative) {
		return statestk[stateptr - relative];
	}

	//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
	final boolean init_stacks() {
		stateptr = -1;
		val_init();
		return true;
	}

	//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
	void dump_stacks(int count) {
		int i;
		System.out.println("=index==state====value=     s:" + stateptr + "  v:" + valptr);
		for (i = 0; i < count; i++)
			System.out.println(" " + i + "    " + statestk[i] + "      " + valstk[i]);
		System.out.println("======================");
	}


//########## SEMANTIC VALUES ##########
//public class SintacticoVal is defined in SintacticoVal.java


	String yytext;//user variable to return contextual strings
	SintacticoVal yyval; //used to return semantic vals from action routines
	SintacticoVal yylval;//the 'lval' (result) I got from yylex()
	SintacticoVal[] valstk;
	int valptr;

	//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
	void val_init() {
		valstk = new SintacticoVal[YYSTACKSIZE];
		yyval = new SintacticoVal();
		yylval = new SintacticoVal();
		valptr = -1;
	}

	void val_push(SintacticoVal val) {
		if (valptr >= YYSTACKSIZE)
			return;
		valstk[++valptr] = val;
	}

	SintacticoVal val_pop() {
		if (valptr < 0)
			return new SintacticoVal();
		return valstk[valptr--];
	}

	void val_drop(int cnt) {
		int ptr;
		ptr = valptr - cnt;
		if (ptr < 0)
			return;
		valptr = ptr;
	}

	SintacticoVal val_peek(int relative) {
		int ptr;
		ptr = valptr - relative;
		if (ptr < 0)
			return new SintacticoVal();
		return valstk[ptr];
	}

	final SintacticoVal dup_yyval(SintacticoVal val) {
		SintacticoVal dup = new SintacticoVal();
		dup.ival = val.ival;
		dup.dval = val.dval;
		dup.sval = val.sval;
		dup.obj = val.obj;
		return dup;
	}

	//#### end semantic value section ####
	public final static short NUMERO = 257;
	public final static short VARIABLE = 258;
	public final static short PARENTESIS = 259;
	public final static short CORCHETE = 260;
	public final static short LLAVE = 261;
	public final static short CIERRE = 262;
	public final static short INIFRAC = 263;
	public final static short FINFRAC = 264;
	public final static short FINPOTEN = 265;
	public final static short DE = 266;
	public final static short FINRAIZ = 267;
	public final static short OPRAIZ = 268;
	public final static short FIN = 269;
	public final static short IGUAL = 270;
	public final static short OPPOTEN = 271;
	public final static short OPMAS = 272;
	public final static short OPMENOS = 273;
	public final static short OPMASMENOS = 274;
	public final static short OPMENOSMAS = 275;
	public final static short OPPOR = 276;
	public final static short OPDIVIDIDO = 277;
	public final static short YYERRCODE = 256;
	final static short[] yylhs = {-1,
			1, 1, 1, 2, 4, 4, 4, 5, 5, 5,
			5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
			6, 6, 6, 6, 7, 7, 7, 7, 7, 8,
			8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
			8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
			8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
			8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
			8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
			8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
			9, 9, 9, 9, 9, 9, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 11,
			12, 12, 0, 0,
	};
	final static short[] yylen = {2,
			1, 1, 1, 2, 2, 1, 1, 5, 4, 3,
			2, 4, 3, 2, 1, 4, 3, 2, 4, 3,
			2, 4, 3, 2, 5, 4, 3, 2, 1, 3,
			3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
			3, 3, 2, 3, 3, 3, 3, 3, 3, 2,
			2, 3, 3, 3, 3, 3, 3, 2, 2, 3,
			3, 3, 3, 3, 3, 2, 2, 3, 3, 3,
			3, 3, 3, 2, 2, 3, 3, 3, 3, 3,
			3, 2, 2, 3, 3, 3, 3, 3, 3, 3,
			2, 3, 3, 3, 3, 3, 3, 3, 2, 3,
			3, 3, 3, 3, 3, 3, 2, 3, 3, 3,
			3, 3, 3, 3, 2, 3, 3, 3, 3, 3,
			3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
			2, 3, 3, 3, 3, 3, 3, 3, 2, 3,
			3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
			2, 1, 2, 2, 2, 2, 2, 2, 2, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
			1, 3, 1, 1,
	};
	final static short[] yydefred = {0,
			0, 0, 1, 2, 3, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 194, 193, 75, 0, 0, 0, 154, 67, 0,
			0, 0, 153, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 4, 5, 0,
			0, 0, 0, 148, 0, 0, 151, 51, 0, 0,
			150, 59, 0, 0, 149, 83, 0, 0, 152, 0,
			156, 155, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 68, 69, 70, 71, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 60, 61, 62, 63,
			0, 0, 0, 192, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 30, 31, 32, 33, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 37, 38, 39,
			40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			44, 45, 46, 47, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 52, 53, 54, 55, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 76, 77, 78, 79,
			0, 0, 0, 0, 0, 0, 0, 19, 22, 0,
			12, 0, 16, 25, 8,
	};
	final static short[] yydgoto = {11,
			12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
			22, 23,
	};
	final static short[] yysindex = {2376,
			-178, -152, 0, 0, 0, 2376, -223, 2395, 2407, 2419,
			0, 2376, -252, -266, -40, -162, -143, -110, -104, -15,
			-226, 0, 0, 0, 2376, 2431, 2443, 0, 0, 2376,
			2455, 2467, 0, -262, 2376, -255, -258, -249, -260, -257,
			-246, -244, -212, -258, -249, -260, -257, -246, -244, -212,
			-258, -249, -260, -257, -246, -244, -212, 0, 0, 2376,
			2376, 2479, 2491, 0, 2503, 2515, 0, 0, 2527, 2539,
			0, 0, 2551, 2563, 0, 0, 2575, 2587, 0, 2599,
			0, 0, -230, -258, -249, -260, -257, -246, -244, -212,
			-251, -229, 0, 0, 0, 0, -228, -258, -249, -260,
			-257, -246, -244, -212, -251, -229, 0, 0, 0, 0,
			2611, -225, 2376, 0, -215, -258, -249, -260, -257, -246,
			-244, -212, -251, -229, 0, 0, 0, 0, -258, -249,
			-260, -257, -246, -244, -212, -251, -229, 0, 0, 0,
			0, -258, -249, -260, -257, -246, -244, -212, -251, -229,
			0, 0, 0, 0, -258, -249, -260, -257, -246, -244,
			-212, -251, -229, 0, 0, 0, 0, -258, -249, -260,
			-257, -246, -244, -212, -251, -229, 0, 0, 0, 0,
			-258, -249, -260, -257, -246, -244, -212, 0, 0, -214,
			0, -211, 0, 0, 0,
	};
	final static short[] yyrindex = {0,
			2200, 2343, 0, 0, 0, 2169, 1954, 1, 17, 33,
			0, 2181, 53, 25, 2303, 2287, 2305, 2321, 2331, 2202,
			1785, 0, 0, 0, 2221, 69, 85, 0, 0, 2234,
			101, 117, 0, 2356, 2246, 137, 1797, 1811, 157, 175,
			1193, 1209, 1223, 1829, 1849, 193, 211, 1237, 1254, 1277,
			1868, 1886, 229, 247, 1297, 1316, 1334, 0, 0, 61,
			2259, 261, 280, 0, 296, 312, 0, 0, 332, 348,
			0, 0, 364, 380, 0, 0, 396, 416, 0, 435,
			0, 0, 456, 1905, 1924, 476, 494, 1353, 1372, 1393,
			512, 539, 0, 0, 0, 0, 559, 1945, 1967, 579,
			597, 1413, 1436, 1456, 615, 643, 0, 0, 0, 0,
			659, 679, 2271, 0, 699, 1981, 1995, 719, 737, 1472,
			1488, 1502, 755, 775, 0, 0, 0, 0, 2011, 2027,
			795, 818, 1518, 1532, 1553, 838, 858, 0, 0, 0,
			0, 2045, 2064, 878, 896, 1573, 1592, 1610, 914, 938,
			0, 0, 0, 0, 2078, 2092, 958, 978, 1629, 1648,
			1669, 998, 1018, 0, 0, 0, 0, 2108, 2125, 1038,
			1056, 1689, 1703, 1717, 1074, 1094, 0, 0, 0, 0,
			2139, 2153, 1117, 1137, 1735, 1751, 1767, 0, 0, 1157,
			0, 1177, 0, 0, 0,
	};
	final static short[] yygindex = {0,
			0, 0, -4, -3, 73, 150, 176, 118, 0, 71,
			0, 0,
	};
	final static int YYTABLESIZE = 2879;
	static short[] yytable;

	static {
		yytable();
	}

	static void yytable() {
		yytable = new short[]{24,
				164, 34, 36, 60, 39, 46, 53, 58, 29, 59,
				113, 68, 25, 72, 111, 63, 172, 27, 66, 25,
				83, 30, 86, 93, 191, 97, 32, 100, 107, 70,
				112, 74, 180, 1, 2, 3, 4, 5, 188, 6,
				189, 30, 35, 191, 7, 76, 8, 9, 10, 8,
				9, 10, 6, 193, 194, 114, 115, 195, 118, 125,
				190, 131, 138, 78, 0, 144, 151, 0, 139, 157,
				164, 28, 33, 170, 177, 0, 183, 0, 0, 24,
				40, 47, 54, 0, 74, 64, 67, 71, 75, 79,
				81, 82, 25, 26, 8, 9, 10, 27, 87, 94,
				131, 0, 0, 101, 108, 29, 190, 0, 192, 65,
				8, 9, 10, 66, 68, 0, 66, 0, 30, 31,
				8, 9, 10, 32, 0, 43, 50, 57, 69, 8,
				9, 10, 70, 0, 119, 126, 11, 132, 139, 0,
				0, 145, 152, 90, 0, 158, 165, 72, 104, 171,
				178, 0, 184, 76, 0, 0, 157, 41, 48, 55,
				0, 73, 8, 9, 10, 74, 0, 77, 8, 9,
				10, 78, 0, 0, 161, 88, 95, 0, 0, 122,
				102, 109, 135, 42, 49, 56, 148, 0, 0, 0,
				161, 0, 165, 0, 174, 0, 0, 187, 0, 0,
				0, 89, 96, 0, 0, 0, 103, 110, 0, 0,
				169, 120, 127, 0, 133, 140, 0, 0, 146, 153,
				0, 0, 159, 166, 0, 0, 172, 179, 173, 185,
				61, 62, 8, 9, 10, 63, 0, 121, 128, 0,
				134, 141, 0, 0, 147, 154, 177, 0, 160, 167,
				0, 0, 173, 180, 0, 186, 80, 8, 9, 10,
				91, 0, 164, 0, 0, 0, 164, 0, 0, 164,
				164, 164, 164, 164, 164, 164, 164, 164, 172, 36,
				0, 0, 172, 0, 0, 172, 172, 172, 172, 172,
				172, 172, 172, 172, 180, 115, 0, 0, 180, 0,
				0, 180, 180, 180, 180, 180, 180, 180, 180, 180,
				6, 43, 0, 0, 0, 0, 0, 0, 6, 0,
				0, 6, 6, 6, 6, 6, 6, 6, 6, 6,
				139, 107, 0, 0, 139, 0, 0, 139, 139, 139,
				139, 139, 139, 139, 139, 139, 74, 50, 0, 0,
				74, 0, 0, 74, 74, 74, 74, 74, 74, 74,
				74, 74, 131, 99, 0, 0, 131, 0, 0, 131,
				131, 131, 131, 131, 131, 131, 131, 131, 66, 58,
				0, 0, 66, 0, 0, 66, 66, 66, 66, 66,
				66, 66, 66, 66, 11, 123, 0, 0, 11, 0,
				0, 0, 0, 0, 0, 11, 11, 11, 11, 11,
				11, 11, 11, 11, 157, 82, 0, 0, 157, 0,
				0, 0, 157, 0, 0, 157, 157, 157, 157, 157,
				157, 157, 161, 157, 147, 0, 161, 0, 0, 0,
				161, 0, 0, 161, 161, 161, 161, 161, 161, 161,
				165, 161, 0, 0, 165, 20, 0, 0, 165, 0,
				0, 165, 165, 165, 165, 165, 165, 165, 169, 165,
				0, 0, 169, 0, 0, 132, 169, 0, 0, 169,
				169, 169, 169, 169, 169, 169, 173, 169, 0, 0,
				173, 0, 0, 135, 173, 0, 0, 173, 173, 173,
				173, 173, 173, 173, 177, 173, 0, 0, 177, 0,
				0, 73, 177, 0, 0, 177, 177, 177, 177, 177,
				177, 177, 91, 177, 0, 0, 91, 0, 0, 91,
				91, 91, 91, 91, 91, 91, 91, 91, 72, 0,
				0, 36, 0, 0, 0, 36, 0, 0, 36, 36,
				36, 36, 36, 36, 36, 36, 36, 115, 23, 0,
				0, 115, 0, 0, 115, 115, 115, 115, 115, 115,
				115, 115, 115, 43, 0, 0, 0, 43, 124, 0,
				43, 43, 43, 43, 43, 43, 43, 43, 43, 0,
				0, 0, 0, 107, 0, 0, 127, 107, 0, 0,
				107, 107, 107, 107, 107, 107, 107, 107, 107, 50,
				0, 0, 0, 50, 65, 0, 50, 50, 50, 50,
				50, 50, 50, 50, 50, 99, 0, 0, 0, 99,
				0, 0, 99, 99, 99, 99, 99, 99, 99, 99,
				99, 58, 64, 0, 0, 58, 0, 0, 58, 58,
				58, 58, 58, 58, 58, 58, 58, 123, 27, 0,
				0, 123, 0, 0, 123, 123, 123, 123, 123, 123,
				123, 123, 123, 0, 0, 0, 0, 82, 13, 0,
				0, 82, 0, 0, 82, 82, 82, 82, 82, 82,
				82, 82, 82, 0, 0, 0, 147, 0, 17, 0,
				147, 0, 0, 147, 147, 147, 147, 147, 147, 147,
				147, 147, 0, 20, 0, 0, 0, 20, 84, 0,
				0, 20, 0, 0, 0, 20, 20, 20, 20, 20,
				20, 20, 20, 132, 0, 0, 87, 132, 0, 0,
				0, 132, 0, 0, 132, 132, 132, 132, 132, 132,
				132, 135, 132, 0, 35, 135, 0, 0, 0, 135,
				0, 0, 135, 135, 135, 135, 135, 135, 135, 73,
				135, 0, 0, 73, 34, 0, 0, 73, 0, 0,
				73, 73, 0, 73, 73, 73, 73, 73, 73, 0,
				0, 0, 0, 0, 108, 0, 72, 0, 0, 0,
				72, 0, 0, 0, 72, 0, 0, 72, 72, 0,
				72, 72, 72, 72, 72, 72, 23, 111, 0, 0,
				23, 0, 0, 0, 23, 0, 0, 0, 23, 23,
				23, 23, 23, 23, 23, 23, 124, 42, 0, 0,
				124, 0, 0, 0, 124, 0, 0, 124, 124, 124,
				124, 124, 124, 124, 127, 124, 0, 41, 127, 0,
				0, 0, 127, 0, 0, 127, 127, 127, 127, 127,
				127, 127, 65, 127, 0, 0, 65, 100, 0, 0,
				65, 0, 0, 65, 65, 0, 65, 65, 65, 65,
				65, 65, 0, 0, 0, 103, 0, 0, 0, 0,
				64, 0, 0, 0, 64, 0, 0, 0, 64, 0,
				0, 64, 64, 49, 64, 64, 64, 64, 64, 64,
				27, 0, 0, 0, 27, 0, 0, 27, 27, 27,
				27, 27, 27, 27, 27, 27, 13, 48, 0, 0,
				13, 0, 0, 0, 13, 0, 0, 0, 13, 13,
				13, 13, 13, 13, 13, 13, 17, 92, 0, 0,
				17, 0, 0, 0, 17, 0, 0, 0, 17, 17,
				17, 17, 17, 17, 17, 17, 84, 95, 0, 0,
				84, 0, 0, 0, 84, 0, 0, 84, 84, 84,
				84, 84, 84, 84, 87, 84, 0, 57, 87, 0,
				0, 0, 87, 0, 0, 87, 87, 87, 87, 87,
				87, 87, 35, 87, 0, 0, 35, 56, 0, 0,
				35, 0, 0, 35, 35, 0, 35, 35, 35, 35,
				35, 35, 34, 0, 0, 0, 34, 116, 0, 0,
				34, 0, 0, 34, 34, 0, 34, 34, 34, 34,
				34, 34, 108, 0, 0, 119, 108, 0, 0, 0,
				108, 0, 0, 108, 108, 108, 108, 108, 108, 108,
				0, 108, 0, 81, 0, 111, 0, 0, 0, 111,
				0, 0, 0, 111, 0, 0, 111, 111, 111, 111,
				111, 111, 111, 80, 111, 42, 0, 0, 0, 42,
				0, 0, 0, 42, 0, 0, 42, 42, 0, 42,
				42, 42, 42, 42, 42, 41, 140, 0, 0, 41,
				0, 0, 0, 41, 0, 0, 41, 41, 0, 41,
				41, 41, 41, 41, 41, 100, 143, 0, 0, 100,
				0, 0, 0, 100, 0, 0, 100, 100, 100, 100,
				100, 100, 100, 103, 100, 0, 26, 103, 0, 0,
				0, 103, 0, 0, 103, 103, 103, 103, 103, 103,
				103, 49, 103, 0, 0, 49, 9, 0, 0, 49,
				0, 0, 49, 49, 0, 49, 49, 49, 49, 49,
				49, 0, 160, 0, 0, 48, 0, 0, 0, 48,
				0, 0, 0, 48, 0, 0, 48, 48, 159, 48,
				48, 48, 48, 48, 48, 92, 0, 0, 0, 92,
				0, 0, 158, 92, 0, 0, 92, 92, 92, 92,
				92, 92, 92, 0, 92, 95, 168, 0, 0, 95,
				0, 0, 0, 95, 0, 0, 95, 95, 95, 95,
				95, 95, 95, 167, 95, 57, 0, 0, 0, 57,
				0, 0, 0, 57, 0, 0, 57, 57, 0, 57,
				57, 57, 57, 57, 57, 56, 166, 0, 0, 56,
				0, 0, 0, 56, 0, 0, 56, 56, 0, 56,
				56, 56, 56, 56, 56, 116, 176, 0, 0, 116,
				0, 0, 0, 116, 0, 0, 116, 116, 116, 116,
				116, 116, 116, 119, 116, 175, 0, 119, 0, 0,
				0, 119, 0, 0, 119, 119, 119, 119, 119, 119,
				119, 81, 119, 174, 0, 81, 0, 0, 0, 81,
				0, 0, 81, 81, 0, 81, 81, 81, 81, 81,
				81, 80, 134, 0, 0, 80, 0, 0, 0, 80,
				0, 0, 80, 80, 0, 80, 80, 80, 80, 80,
				80, 133, 0, 0, 140, 0, 0, 0, 140, 0,
				0, 0, 140, 0, 0, 140, 140, 140, 140, 140,
				140, 140, 136, 140, 143, 0, 0, 0, 143, 0,
				0, 0, 143, 0, 0, 143, 143, 143, 143, 143,
				143, 143, 126, 143, 26, 0, 0, 0, 26, 0,
				0, 0, 26, 0, 0, 0, 26, 26, 26, 26,
				26, 26, 26, 26, 9, 125, 0, 0, 9, 0,
				0, 0, 9, 0, 0, 0, 9, 9, 9, 9,
				9, 9, 9, 9, 160, 128, 0, 0, 160, 0,
				0, 160, 160, 160, 160, 160, 160, 160, 0, 160,
				159, 86, 0, 0, 159, 0, 0, 159, 159, 159,
				159, 159, 159, 159, 158, 159, 0, 85, 158, 0,
				0, 158, 158, 158, 158, 158, 158, 158, 168, 158,
				0, 88, 168, 0, 0, 168, 168, 168, 168, 168,
				168, 168, 0, 168, 0, 167, 0, 110, 0, 167,
				0, 0, 167, 167, 167, 167, 167, 167, 167, 0,
				167, 109, 0, 0, 0, 0, 0, 0, 166, 0,
				0, 0, 166, 0, 0, 166, 166, 166, 166, 166,
				166, 166, 112, 166, 0, 0, 0, 0, 176, 0,
				0, 0, 176, 0, 0, 176, 176, 176, 176, 176,
				176, 176, 102, 176, 0, 0, 0, 175, 0, 0,
				0, 175, 0, 0, 175, 175, 175, 175, 175, 175,
				175, 101, 175, 0, 0, 174, 0, 0, 0, 174,
				0, 0, 174, 174, 174, 174, 174, 174, 174, 104,
				174, 0, 0, 0, 134, 0, 0, 0, 134, 0,
				0, 134, 134, 134, 134, 134, 134, 134, 94, 134,
				0, 0, 0, 133, 0, 0, 0, 133, 0, 0,
				133, 133, 133, 133, 133, 133, 133, 93, 133, 0,
				0, 0, 0, 0, 136, 0, 0, 0, 136, 0,
				0, 136, 136, 136, 136, 136, 136, 136, 96, 136,
				0, 0, 0, 0, 126, 0, 0, 0, 126, 0,
				0, 126, 126, 126, 126, 126, 126, 126, 118, 126,
				0, 0, 0, 0, 0, 0, 0, 125, 0, 0,
				0, 125, 117, 0, 125, 125, 125, 125, 125, 125,
				125, 0, 125, 0, 0, 0, 120, 128, 0, 0,
				0, 128, 0, 0, 128, 128, 128, 128, 128, 128,
				128, 0, 128, 86, 142, 0, 0, 86, 0, 0,
				86, 86, 86, 86, 86, 86, 86, 0, 86, 85,
				141, 0, 0, 85, 0, 0, 85, 85, 85, 85,
				85, 85, 85, 88, 85, 0, 144, 88, 0, 0,
				88, 88, 88, 88, 88, 88, 88, 0, 88, 110,
				0, 0, 0, 110, 189, 0, 110, 110, 110, 110,
				110, 110, 110, 109, 110, 0, 163, 109, 0, 0,
				109, 109, 109, 109, 109, 109, 109, 0, 109, 0,
				162, 0, 0, 0, 112, 0, 0, 0, 112, 0,
				0, 112, 112, 112, 112, 112, 112, 112, 171, 112,
				0, 0, 0, 0, 102, 0, 0, 0, 102, 0,
				0, 102, 102, 102, 102, 102, 102, 102, 170, 102,
				0, 0, 0, 101, 0, 0, 0, 101, 0, 0,
				101, 101, 101, 101, 101, 101, 101, 179, 101, 0,
				0, 104, 0, 0, 0, 104, 0, 0, 104, 104,
				104, 104, 104, 104, 104, 178, 104, 0, 0, 0,
				94, 0, 0, 0, 94, 0, 0, 94, 94, 94,
				94, 94, 94, 94, 138, 94, 0, 0, 0, 93,
				0, 0, 0, 93, 0, 0, 93, 93, 93, 93,
				93, 93, 93, 137, 93, 0, 0, 0, 0, 0,
				96, 0, 0, 0, 96, 0, 0, 96, 96, 96,
				96, 96, 96, 96, 130, 96, 0, 0, 0, 0,
				118, 0, 0, 15, 118, 0, 0, 118, 118, 118,
				118, 118, 118, 118, 117, 118, 129, 0, 117, 0,
				0, 117, 117, 117, 117, 117, 117, 117, 120, 117,
				90, 0, 120, 0, 0, 120, 120, 120, 120, 120,
				120, 120, 0, 120, 89, 0, 142, 0, 0, 0,
				142, 0, 0, 142, 142, 142, 142, 142, 142, 142,
				114, 142, 141, 0, 0, 0, 141, 0, 0, 141,
				141, 141, 141, 141, 141, 141, 113, 141, 144, 0,
				0, 0, 144, 0, 0, 144, 144, 144, 144, 144,
				144, 144, 189, 144, 106, 0, 189, 0, 0, 0,
				189, 0, 0, 189, 189, 189, 189, 0, 163, 0,
				189, 189, 163, 105, 0, 163, 163, 0, 163, 163,
				163, 163, 162, 163, 0, 0, 162, 98, 0, 162,
				162, 0, 162, 162, 162, 162, 0, 162, 0, 0,
				171, 97, 0, 0, 171, 0, 0, 171, 171, 0,
				171, 171, 171, 171, 0, 171, 0, 122, 0, 0,
				170, 0, 0, 0, 170, 0, 0, 170, 170, 0,
				170, 170, 170, 170, 121, 170, 0, 0, 0, 179,
				0, 0, 0, 179, 0, 0, 179, 179, 146, 179,
				179, 179, 179, 0, 179, 0, 0, 178, 0, 0,
				0, 178, 145, 0, 178, 178, 0, 178, 178, 178,
				178, 0, 178, 0, 0, 0, 138, 0, 29, 0,
				138, 0, 0, 138, 138, 0, 138, 138, 138, 138,
				7, 138, 0, 0, 0, 137, 0, 0, 0, 137,
				0, 0, 137, 137, 0, 137, 137, 137, 137, 188,
				137, 182, 0, 0, 0, 0, 130, 0, 0, 0,
				130, 0, 0, 130, 130, 15, 130, 130, 130, 130,
				21, 130, 15, 15, 15, 15, 0, 0, 129, 15,
				15, 0, 129, 24, 0, 129, 129, 0, 129, 129,
				129, 129, 90, 129, 0, 14, 90, 0, 0, 90,
				90, 0, 90, 90, 90, 90, 89, 90, 18, 0,
				89, 0, 0, 89, 89, 0, 89, 89, 89, 89,
				10, 89, 114, 0, 0, 0, 114, 0, 0, 114,
				114, 0, 114, 114, 114, 114, 186, 114, 113, 0,
				0, 0, 113, 0, 0, 113, 113, 0, 113, 113,
				113, 113, 181, 113, 185, 0, 106, 0, 0, 0,
				106, 0, 0, 106, 106, 0, 106, 106, 106, 106,
				184, 106, 0, 0, 0, 105, 0, 0, 0, 105,
				183, 0, 105, 105, 0, 105, 105, 105, 105, 98,
				105, 0, 187, 98, 0, 0, 98, 98, 0, 98,
				98, 98, 98, 97, 98, 28, 0, 97, 0, 0,
				97, 97, 0, 97, 97, 97, 97, 0, 97, 122,
				0, 0, 0, 122, 0, 0, 122, 122, 0, 122,
				122, 122, 122, 0, 122, 0, 121, 0, 0, 0,
				121, 0, 0, 121, 121, 0, 121, 121, 121, 121,
				146, 121, 0, 0, 146, 0, 0, 146, 146, 0,
				146, 146, 146, 146, 145, 146, 0, 0, 145, 0,
				0, 145, 145, 0, 145, 145, 145, 145, 0, 145,
				29, 0, 0, 0, 29, 0, 0, 29, 29, 29,
				29, 0, 7, 0, 29, 29, 7, 0, 0, 7,
				7, 7, 7, 0, 0, 0, 7, 7, 0, 182,
				0, 188, 0, 182, 0, 188, 0, 182, 188, 188,
				182, 182, 182, 0, 0, 0, 188, 182, 182, 0,
				0, 0, 21, 0, 0, 0, 21, 0, 0, 21,
				21, 21, 21, 0, 0, 24, 21, 21, 0, 24,
				0, 0, 24, 24, 24, 24, 0, 14, 0, 24,
				24, 14, 0, 0, 14, 14, 14, 14, 0, 0,
				18, 14, 14, 0, 18, 0, 0, 18, 18, 18,
				18, 0, 10, 0, 18, 18, 10, 0, 0, 10,
				10, 10, 10, 0, 186, 0, 10, 10, 186, 0,
				0, 0, 186, 0, 0, 186, 186, 186, 0, 0,
				181, 0, 0, 186, 181, 0, 185, 0, 181, 0,
				185, 181, 181, 185, 185, 185, 0, 0, 0, 181,
				0, 185, 184, 0, 0, 0, 184, 0, 0, 184,
				184, 184, 183, 0, 0, 0, 183, 184, 0, 183,
				183, 183, 0, 0, 187, 0, 0, 183, 187, 0,
				0, 187, 187, 28, 0, 0, 0, 28, 0, 187,
				0, 28, 0, 0, 28, 28, 28, 28, 28, 28,
				28, 28, 1, 2, 3, 4, 5, 0, 6, 0,
				0, 0, 0, 7, 0, 0, 0, 0, 8, 9,
				10, 37, 38, 3, 4, 5, 0, 6, 0, 0,
				0, 0, 7, 44, 45, 3, 4, 5, 0, 6,
				0, 0, 0, 0, 7, 51, 52, 3, 4, 5,
				0, 6, 0, 0, 0, 0, 7, 84, 85, 3,
				4, 5, 0, 6, 0, 0, 0, 0, 7, 91,
				92, 3, 4, 5, 0, 6, 0, 0, 0, 0,
				7, 98, 99, 3, 4, 5, 0, 6, 0, 0,
				0, 0, 7, 105, 106, 3, 4, 5, 0, 6,
				0, 0, 0, 0, 7, 116, 117, 3, 4, 5,
				0, 6, 0, 0, 0, 0, 7, 123, 124, 3,
				4, 5, 0, 6, 0, 0, 0, 0, 7, 129,
				130, 3, 4, 5, 0, 6, 0, 0, 0, 0,
				7, 136, 137, 3, 4, 5, 0, 6, 0, 0,
				0, 0, 7, 142, 143, 3, 4, 5, 0, 6,
				0, 0, 0, 0, 7, 149, 150, 3, 4, 5,
				0, 6, 0, 0, 0, 0, 7, 155, 156, 3,
				4, 5, 0, 6, 0, 0, 0, 0, 7, 162,
				163, 3, 4, 5, 0, 6, 0, 0, 0, 0,
				7, 168, 169, 3, 4, 5, 0, 6, 0, 0,
				0, 0, 7, 175, 176, 3, 4, 5, 0, 6,
				0, 0, 0, 0, 7, 181, 182, 3, 4, 5,
				0, 6, 0, 0, 0, 0, 7, 1, 2, 3,
				4, 5, 0, 6, 0, 0, 0, 0, 7,
		};
	}

	static short[] yycheck;

	static {
		yycheck();
	}

	static void yycheck() {
		yycheck = new short[]{258,
				0, 6, 7, 270, 8, 9, 10, 12, 258, 262,
				266, 258, 271, 258, 277, 276, 0, 276, 276, 271,
				25, 271, 26, 27, 0, 30, 276, 31, 32, 276,
				35, 276, 0, 257, 258, 259, 260, 261, 269, 263,
				269, 271, 266, 269, 268, 258, 273, 274, 275, 273,
				274, 275, 0, 269, 269, 60, 61, 269, 62, 63,
				0, 65, 66, 276, -1, 69, 70, -1, 0, 73,
				74, 1, 2, 77, 78, -1, 80, -1, -1, 258,
				8, 9, 10, -1, 0, 15, 16, 17, 18, 19,
				20, 21, 271, 272, 273, 274, 275, 276, 26, 27,
				0, -1, -1, 31, 32, 258, 111, -1, 113, 272,
				273, 274, 275, 276, 258, -1, 0, -1, 271, 272,
				273, 274, 275, 276, -1, 8, 9, 10, 272, 273,
				274, 275, 276, -1, 62, 63, 0, 65, 66, -1,
				-1, 69, 70, 26, -1, 73, 74, 258, 31, 77,
				78, -1, 80, 258, -1, -1, 0, 8, 9, 10,
				-1, 272, 273, 274, 275, 276, -1, 272, 273, 274,
				275, 276, -1, -1, 0, 26, 27, -1, -1, 62,
				31, 32, 65, 8, 9, 10, 69, -1, -1, -1,
				73, -1, 0, -1, 77, -1, -1, 80, -1, -1,
				-1, 26, 27, -1, -1, -1, 31, 32, -1, -1,
				0, 62, 63, -1, 65, 66, -1, -1, 69, 70,
				-1, -1, 73, 74, -1, -1, 77, 78, 0, 80,
				271, 272, 273, 274, 275, 276, -1, 62, 63, -1,
				65, 66, -1, -1, 69, 70, 0, -1, 73, 74,
				-1, -1, 77, 78, -1, 80, 272, 273, 274, 275,
				0, -1, 262, -1, -1, -1, 266, -1, -1, 269,
				270, 271, 272, 273, 274, 275, 276, 277, 262, 0,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 276, 277, 262, 0, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 276, 277,
				258, 0, -1, -1, -1, -1, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 276, 277,
				262, 0, -1, -1, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 276, 277, 262, 0, -1, -1,
				266, -1, -1, 269, 270, 271, 272, 273, 274, 275,
				276, 277, 262, 0, -1, -1, 266, -1, -1, 269,
				270, 271, 272, 273, 274, 275, 276, 277, 262, 0,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 276, 277, 258, 0, -1, -1, 262, -1,
				-1, -1, -1, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 276, 277, 258, 0, -1, -1, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 258, 277, 0, -1, 262, -1, -1, -1,
				266, -1, -1, 269, 270, 271, 272, 273, 274, 275,
				258, 277, -1, -1, 262, 0, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 258, 277,
				-1, -1, 262, -1, -1, 0, 266, -1, -1, 269,
				270, 271, 272, 273, 274, 275, 258, 277, -1, -1,
				262, -1, -1, 0, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 258, 277, -1, -1, 262, -1,
				-1, 0, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 262, 277, -1, -1, 266, -1, -1, 269,
				270, 271, 272, 273, 274, 275, 276, 277, 0, -1,
				-1, 262, -1, -1, -1, 266, -1, -1, 269, 270,
				271, 272, 273, 274, 275, 276, 277, 262, 0, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 276, 277, 262, -1, -1, -1, 266, 0, -1,
				269, 270, 271, 272, 273, 274, 275, 276, 277, -1,
				-1, -1, -1, 262, -1, -1, 0, 266, -1, -1,
				269, 270, 271, 272, 273, 274, 275, 276, 277, 262,
				-1, -1, -1, 266, 0, -1, 269, 270, 271, 272,
				273, 274, 275, 276, 277, 262, -1, -1, -1, 266,
				-1, -1, 269, 270, 271, 272, 273, 274, 275, 276,
				277, 262, 0, -1, -1, 266, -1, -1, 269, 270,
				271, 272, 273, 274, 275, 276, 277, 262, 0, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 276, 277, -1, -1, -1, -1, 262, 0, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 276, 277, -1, -1, -1, 262, -1, 0, -1,
				266, -1, -1, 269, 270, 271, 272, 273, 274, 275,
				276, 277, -1, 258, -1, -1, -1, 262, 0, -1,
				-1, 266, -1, -1, -1, 270, 271, 272, 273, 274,
				275, 276, 277, 258, -1, -1, 0, 262, -1, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 258, 277, -1, 0, 262, -1, -1, -1, 266,
				-1, -1, 269, 270, 271, 272, 273, 274, 275, 258,
				277, -1, -1, 262, 0, -1, -1, 266, -1, -1,
				269, 270, -1, 272, 273, 274, 275, 276, 277, -1,
				-1, -1, -1, -1, 0, -1, 258, -1, -1, -1,
				262, -1, -1, -1, 266, -1, -1, 269, 270, -1,
				272, 273, 274, 275, 276, 277, 258, 0, -1, -1,
				262, -1, -1, -1, 266, -1, -1, -1, 270, 271,
				272, 273, 274, 275, 276, 277, 258, 0, -1, -1,
				262, -1, -1, -1, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 258, 277, -1, 0, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 258, 277, -1, -1, 262, 0, -1, -1,
				266, -1, -1, 269, 270, -1, 272, 273, 274, 275,
				276, 277, -1, -1, -1, 0, -1, -1, -1, -1,
				258, -1, -1, -1, 262, -1, -1, -1, 266, -1,
				-1, 269, 270, 0, 272, 273, 274, 275, 276, 277,
				262, -1, -1, -1, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 276, 277, 258, 0, -1, -1,
				262, -1, -1, -1, 266, -1, -1, -1, 270, 271,
				272, 273, 274, 275, 276, 277, 258, 0, -1, -1,
				262, -1, -1, -1, 266, -1, -1, -1, 270, 271,
				272, 273, 274, 275, 276, 277, 258, 0, -1, -1,
				262, -1, -1, -1, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 258, 277, -1, 0, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 258, 277, -1, -1, 262, 0, -1, -1,
				266, -1, -1, 269, 270, -1, 272, 273, 274, 275,
				276, 277, 258, -1, -1, -1, 262, 0, -1, -1,
				266, -1, -1, 269, 270, -1, 272, 273, 274, 275,
				276, 277, 258, -1, -1, 0, 262, -1, -1, -1,
				266, -1, -1, 269, 270, 271, 272, 273, 274, 275,
				-1, 277, -1, 0, -1, 258, -1, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, 271, 272,
				273, 274, 275, 0, 277, 258, -1, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, -1, 272,
				273, 274, 275, 276, 277, 258, 0, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, -1, 272,
				273, 274, 275, 276, 277, 258, 0, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, 271, 272,
				273, 274, 275, 258, 277, -1, 0, 262, -1, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 258, 277, -1, -1, 262, 0, -1, -1, 266,
				-1, -1, 269, 270, -1, 272, 273, 274, 275, 276,
				277, -1, 0, -1, -1, 258, -1, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, 0, 272,
				273, 274, 275, 276, 277, 258, -1, -1, -1, 262,
				-1, -1, 0, 266, -1, -1, 269, 270, 271, 272,
				273, 274, 275, -1, 277, 258, 0, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, 271, 272,
				273, 274, 275, 0, 277, 258, -1, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, -1, 272,
				273, 274, 275, 276, 277, 258, 0, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, -1, 272,
				273, 274, 275, 276, 277, 258, 0, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, 271, 272,
				273, 274, 275, 258, 277, 0, -1, 262, -1, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 258, 277, 0, -1, 262, -1, -1, -1, 266,
				-1, -1, 269, 270, -1, 272, 273, 274, 275, 276,
				277, 258, 0, -1, -1, 262, -1, -1, -1, 266,
				-1, -1, 269, 270, -1, 272, 273, 274, 275, 276,
				277, 0, -1, -1, 258, -1, -1, -1, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 0, 277, 258, -1, -1, -1, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 0, 277, 258, -1, -1, -1, 262, -1,
				-1, -1, 266, -1, -1, -1, 270, 271, 272, 273,
				274, 275, 276, 277, 258, 0, -1, -1, 262, -1,
				-1, -1, 266, -1, -1, -1, 270, 271, 272, 273,
				274, 275, 276, 277, 262, 0, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, -1, 277,
				262, 0, -1, -1, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 262, 277, -1, 0, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 262, 277,
				-1, 0, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, -1, 277, -1, 262, -1, 0, -1, 266,
				-1, -1, 269, 270, 271, 272, 273, 274, 275, -1,
				277, 0, -1, -1, -1, -1, -1, -1, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 0, 277, -1, -1, -1, -1, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 0, 277, -1, -1, -1, 262, -1, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 0, 277, -1, -1, 262, -1, -1, -1, 266,
				-1, -1, 269, 270, 271, 272, 273, 274, 275, 0,
				277, -1, -1, -1, 262, -1, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 0, 277,
				-1, -1, -1, 262, -1, -1, -1, 266, -1, -1,
				269, 270, 271, 272, 273, 274, 275, 0, 277, -1,
				-1, -1, -1, -1, 262, -1, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 0, 277,
				-1, -1, -1, -1, 262, -1, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 0, 277,
				-1, -1, -1, -1, -1, -1, -1, 262, -1, -1,
				-1, 266, 0, -1, 269, 270, 271, 272, 273, 274,
				275, -1, 277, -1, -1, -1, 0, 262, -1, -1,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, -1, 277, 262, 0, -1, -1, 266, -1, -1,
				269, 270, 271, 272, 273, 274, 275, -1, 277, 262,
				0, -1, -1, 266, -1, -1, 269, 270, 271, 272,
				273, 274, 275, 262, 277, -1, 0, 266, -1, -1,
				269, 270, 271, 272, 273, 274, 275, -1, 277, 262,
				-1, -1, -1, 266, 0, -1, 269, 270, 271, 272,
				273, 274, 275, 262, 277, -1, 0, 266, -1, -1,
				269, 270, 271, 272, 273, 274, 275, -1, 277, -1,
				0, -1, -1, -1, 262, -1, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 0, 277,
				-1, -1, -1, -1, 262, -1, -1, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 0, 277,
				-1, -1, -1, 262, -1, -1, -1, 266, -1, -1,
				269, 270, 271, 272, 273, 274, 275, 0, 277, -1,
				-1, 262, -1, -1, -1, 266, -1, -1, 269, 270,
				271, 272, 273, 274, 275, 0, 277, -1, -1, -1,
				262, -1, -1, -1, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 0, 277, -1, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, 271, 272,
				273, 274, 275, 0, 277, -1, -1, -1, -1, -1,
				262, -1, -1, -1, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 0, 277, -1, -1, -1, -1,
				262, -1, -1, 0, 266, -1, -1, 269, 270, 271,
				272, 273, 274, 275, 262, 277, 0, -1, 266, -1,
				-1, 269, 270, 271, 272, 273, 274, 275, 262, 277,
				0, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, -1, 277, 0, -1, 262, -1, -1, -1,
				266, -1, -1, 269, 270, 271, 272, 273, 274, 275,
				0, 277, 262, -1, -1, -1, 266, -1, -1, 269,
				270, 271, 272, 273, 274, 275, 0, 277, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, 272, 273,
				274, 275, 258, 277, 0, -1, 262, -1, -1, -1,
				266, -1, -1, 269, 270, 271, 272, -1, 262, -1,
				276, 277, 266, 0, -1, 269, 270, -1, 272, 273,
				274, 275, 262, 277, -1, -1, 266, 0, -1, 269,
				270, -1, 272, 273, 274, 275, -1, 277, -1, -1,
				262, 0, -1, -1, 266, -1, -1, 269, 270, -1,
				272, 273, 274, 275, -1, 277, -1, 0, -1, -1,
				262, -1, -1, -1, 266, -1, -1, 269, 270, -1,
				272, 273, 274, 275, 0, 277, -1, -1, -1, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, 0, 272,
				273, 274, 275, -1, 277, -1, -1, 262, -1, -1,
				-1, 266, 0, -1, 269, 270, -1, 272, 273, 274,
				275, -1, 277, -1, -1, -1, 262, -1, 0, -1,
				266, -1, -1, 269, 270, -1, 272, 273, 274, 275,
				0, 277, -1, -1, -1, 262, -1, -1, -1, 266,
				-1, -1, 269, 270, -1, 272, 273, 274, 275, 0,
				277, 0, -1, -1, -1, -1, 262, -1, -1, -1,
				266, -1, -1, 269, 270, 262, 272, 273, 274, 275,
				0, 277, 269, 270, 271, 272, -1, -1, 262, 276,
				277, -1, 266, 0, -1, 269, 270, -1, 272, 273,
				274, 275, 262, 277, -1, 0, 266, -1, -1, 269,
				270, -1, 272, 273, 274, 275, 262, 277, 0, -1,
				266, -1, -1, 269, 270, -1, 272, 273, 274, 275,
				0, 277, 262, -1, -1, -1, 266, -1, -1, 269,
				270, -1, 272, 273, 274, 275, 0, 277, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, -1, 272, 273,
				274, 275, 0, 277, 0, -1, 262, -1, -1, -1,
				266, -1, -1, 269, 270, -1, 272, 273, 274, 275,
				0, 277, -1, -1, -1, 262, -1, -1, -1, 266,
				0, -1, 269, 270, -1, 272, 273, 274, 275, 262,
				277, -1, 0, 266, -1, -1, 269, 270, -1, 272,
				273, 274, 275, 262, 277, 0, -1, 266, -1, -1,
				269, 270, -1, 272, 273, 274, 275, -1, 277, 262,
				-1, -1, -1, 266, -1, -1, 269, 270, -1, 272,
				273, 274, 275, -1, 277, -1, 262, -1, -1, -1,
				266, -1, -1, 269, 270, -1, 272, 273, 274, 275,
				262, 277, -1, -1, 266, -1, -1, 269, 270, -1,
				272, 273, 274, 275, 262, 277, -1, -1, 266, -1,
				-1, 269, 270, -1, 272, 273, 274, 275, -1, 277,
				262, -1, -1, -1, 266, -1, -1, 269, 270, 271,
				272, -1, 262, -1, 276, 277, 266, -1, -1, 269,
				270, 271, 272, -1, -1, -1, 276, 277, -1, 258,
				-1, 262, -1, 262, -1, 266, -1, 266, 269, 270,
				269, 270, 271, -1, -1, -1, 277, 276, 277, -1,
				-1, -1, 262, -1, -1, -1, 266, -1, -1, 269,
				270, 271, 272, -1, -1, 262, 276, 277, -1, 266,
				-1, -1, 269, 270, 271, 272, -1, 262, -1, 276,
				277, 266, -1, -1, 269, 270, 271, 272, -1, -1,
				262, 276, 277, -1, 266, -1, -1, 269, 270, 271,
				272, -1, 262, -1, 276, 277, 266, -1, -1, 269,
				270, 271, 272, -1, 258, -1, 276, 277, 262, -1,
				-1, -1, 266, -1, -1, 269, 270, 271, -1, -1,
				258, -1, -1, 277, 262, -1, 262, -1, 266, -1,
				266, 269, 270, 269, 270, 271, -1, -1, -1, 277,
				-1, 277, 262, -1, -1, -1, 266, -1, -1, 269,
				270, 271, 262, -1, -1, -1, 266, 277, -1, 269,
				270, 271, -1, -1, 262, -1, -1, 277, 266, -1,
				-1, 269, 270, 258, -1, -1, -1, 262, -1, 277,
				-1, 266, -1, -1, 269, 270, 271, 272, 273, 274,
				275, 276, 257, 258, 259, 260, 261, -1, 263, -1,
				-1, -1, -1, 268, -1, -1, -1, -1, 273, 274,
				275, 257, 258, 259, 260, 261, -1, 263, -1, -1,
				-1, -1, 268, 257, 258, 259, 260, 261, -1, 263,
				-1, -1, -1, -1, 268, 257, 258, 259, 260, 261,
				-1, 263, -1, -1, -1, -1, 268, 257, 258, 259,
				260, 261, -1, 263, -1, -1, -1, -1, 268, 257,
				258, 259, 260, 261, -1, 263, -1, -1, -1, -1,
				268, 257, 258, 259, 260, 261, -1, 263, -1, -1,
				-1, -1, 268, 257, 258, 259, 260, 261, -1, 263,
				-1, -1, -1, -1, 268, 257, 258, 259, 260, 261,
				-1, 263, -1, -1, -1, -1, 268, 257, 258, 259,
				260, 261, -1, 263, -1, -1, -1, -1, 268, 257,
				258, 259, 260, 261, -1, 263, -1, -1, -1, -1,
				268, 257, 258, 259, 260, 261, -1, 263, -1, -1,
				-1, -1, 268, 257, 258, 259, 260, 261, -1, 263,
				-1, -1, -1, -1, 268, 257, 258, 259, 260, 261,
				-1, 263, -1, -1, -1, -1, 268, 257, 258, 259,
				260, 261, -1, 263, -1, -1, -1, -1, 268, 257,
				258, 259, 260, 261, -1, 263, -1, -1, -1, -1,
				268, 257, 258, 259, 260, 261, -1, 263, -1, -1,
				-1, -1, 268, 257, 258, 259, 260, 261, -1, 263,
				-1, -1, -1, -1, 268, 257, 258, 259, 260, 261,
				-1, 263, -1, -1, -1, -1, 268, 257, 258, 259,
				260, 261, -1, 263, -1, -1, -1, -1, 268,
		};
	}

	final static short YYFINAL = 11;
	final static short YYMAXTOKEN = 277;
	final static String[] yyname = {
			"end-of-file", null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, "NUMERO", "VARIABLE", "PARENTESIS", "CORCHETE", "LLAVE", "CIERRE",
			"INIFRAC", "FINFRAC", "FINPOTEN", "DE", "FINRAIZ", "OPRAIZ", "FIN", "IGUAL", "OPPOTEN",
			"OPMAS", "OPMENOS", "OPMASMENOS", "OPMENOSMAS", "OPPOR", "OPDIVIDIDO",
	};
	final static String[] yyrule = {
			"$accept : aceptable",
			"inicio_parentesis : PARENTESIS",
			"inicio_parentesis : CORCHETE",
			"inicio_parentesis : LLAVE",
			"dictando_parentesis : inicio_parentesis expresion_parte",
			"expresion_parteParentesis : dictando_parentesis CIERRE",
			"expresion_parteParentesis : dictando_parentesis",
			"expresion_parteParentesis : inicio_parentesis",
			"raiz : OPRAIZ expresion_parte DE expresion_parte FIN",
			"raiz : OPRAIZ expresion_parte DE expresion_parte",
			"raiz : OPRAIZ expresion_parte DE",
			"raiz : OPRAIZ expresion_parte",
			"raiz : OPRAIZ DE expresion_parte FIN",
			"raiz : OPRAIZ DE expresion_parte",
			"raiz : OPRAIZ DE",
			"raiz : OPRAIZ",
			"potencia : expresion_parteParentesis OPPOTEN expresion_parte FIN",
			"potencia : expresion_parteParentesis OPPOTEN expresion_parte",
			"potencia : expresion_parteParentesis OPPOTEN",
			"potencia : NUMERO OPPOTEN expresion_parte FIN",
			"potencia : NUMERO OPPOTEN expresion_parte",
			"potencia : NUMERO OPPOTEN",
			"potencia : VARIABLE OPPOTEN expresion_parte FIN",
			"potencia : VARIABLE OPPOTEN expresion_parte",
			"potencia : VARIABLE OPPOTEN",
			"fraccion : INIFRAC expresion_parte OPDIVIDIDO expresion_parte FIN",
			"fraccion : INIFRAC expresion_parte OPDIVIDIDO expresion_parte",
			"fraccion : INIFRAC expresion_parte OPDIVIDIDO",
			"fraccion : INIFRAC expresion_parte",
			"fraccion : INIFRAC",
			"multiplicacion : expresion_parteParentesis OPPOR expresion_parteParentesis",
			"multiplicacion : expresion_parteParentesis OPPOR raiz",
			"multiplicacion : expresion_parteParentesis OPPOR potencia",
			"multiplicacion : expresion_parteParentesis OPPOR fraccion",
			"multiplicacion : expresion_parteParentesis OPPOR VARIABLE",
			"multiplicacion : expresion_parteParentesis OPPOR NUMERO",
			"multiplicacion : expresion_parteParentesis OPPOR",
			"multiplicacion : raiz OPPOR expresion_parteParentesis",
			"multiplicacion : raiz OPPOR raiz",
			"multiplicacion : raiz OPPOR potencia",
			"multiplicacion : raiz OPPOR fraccion",
			"multiplicacion : raiz OPPOR VARIABLE",
			"multiplicacion : raiz OPPOR NUMERO",
			"multiplicacion : raiz OPPOR",
			"multiplicacion : potencia OPPOR expresion_parteParentesis",
			"multiplicacion : potencia OPPOR raiz",
			"multiplicacion : potencia OPPOR potencia",
			"multiplicacion : potencia OPPOR fraccion",
			"multiplicacion : potencia OPPOR VARIABLE",
			"multiplicacion : potencia OPPOR NUMERO",
			"multiplicacion : potencia OPPOR",
			"multiplicacion : potencia VARIABLE",
			"multiplicacion : fraccion OPPOR expresion_parteParentesis",
			"multiplicacion : fraccion OPPOR raiz",
			"multiplicacion : fraccion OPPOR potencia",
			"multiplicacion : fraccion OPPOR fraccion",
			"multiplicacion : fraccion OPPOR VARIABLE",
			"multiplicacion : fraccion OPPOR NUMERO",
			"multiplicacion : fraccion OPPOR",
			"multiplicacion : fraccion VARIABLE",
			"multiplicacion : VARIABLE OPPOR expresion_parteParentesis",
			"multiplicacion : VARIABLE OPPOR raiz",
			"multiplicacion : VARIABLE OPPOR potencia",
			"multiplicacion : VARIABLE OPPOR fraccion",
			"multiplicacion : VARIABLE OPPOR VARIABLE",
			"multiplicacion : VARIABLE OPPOR NUMERO",
			"multiplicacion : VARIABLE OPPOR",
			"multiplicacion : VARIABLE VARIABLE",
			"multiplicacion : NUMERO OPPOR expresion_parteParentesis",
			"multiplicacion : NUMERO OPPOR raiz",
			"multiplicacion : NUMERO OPPOR potencia",
			"multiplicacion : NUMERO OPPOR fraccion",
			"multiplicacion : NUMERO OPPOR VARIABLE",
			"multiplicacion : NUMERO OPPOR NUMERO",
			"multiplicacion : NUMERO OPPOR",
			"multiplicacion : NUMERO VARIABLE",
			"multiplicacion : multiplicacion OPPOR expresion_parteParentesis",
			"multiplicacion : multiplicacion OPPOR raiz",
			"multiplicacion : multiplicacion OPPOR potencia",
			"multiplicacion : multiplicacion OPPOR fraccion",
			"multiplicacion : multiplicacion OPPOR VARIABLE",
			"multiplicacion : multiplicacion OPPOR NUMERO",
			"multiplicacion : multiplicacion OPPOR",
			"multiplicacion : multiplicacion VARIABLE",
			"suma : expresion_parteParentesis OPMAS expresion_parteParentesis",
			"suma : expresion_parteParentesis OPMAS fraccion",
			"suma : expresion_parteParentesis OPMAS potencia",
			"suma : expresion_parteParentesis OPMAS raiz",
			"suma : expresion_parteParentesis OPMAS multiplicacion",
			"suma : expresion_parteParentesis OPMAS VARIABLE",
			"suma : expresion_parteParentesis OPMAS NUMERO",
			"suma : expresion_parteParentesis OPMAS",
			"suma : fraccion OPMAS expresion_parteParentesis",
			"suma : fraccion OPMAS fraccion",
			"suma : fraccion OPMAS potencia",
			"suma : fraccion OPMAS raiz",
			"suma : fraccion OPMAS multiplicacion",
			"suma : fraccion OPMAS VARIABLE",
			"suma : fraccion OPMAS NUMERO",
			"suma : fraccion OPMAS",
			"suma : potencia OPMAS expresion_parteParentesis",
			"suma : potencia OPMAS fraccion",
			"suma : potencia OPMAS potencia",
			"suma : potencia OPMAS raiz",
			"suma : potencia OPMAS multiplicacion",
			"suma : potencia OPMAS VARIABLE",
			"suma : potencia OPMAS NUMERO",
			"suma : potencia OPMAS",
			"suma : raiz OPMAS expresion_parteParentesis",
			"suma : raiz OPMAS fraccion",
			"suma : raiz OPMAS potencia",
			"suma : raiz OPMAS raiz",
			"suma : raiz OPMAS multiplicacion",
			"suma : raiz OPMAS VARIABLE",
			"suma : raiz OPMAS NUMERO",
			"suma : raiz OPMAS",
			"suma : multiplicacion OPMAS expresion_parteParentesis",
			"suma : multiplicacion OPMAS fraccion",
			"suma : multiplicacion OPMAS potencia",
			"suma : multiplicacion OPMAS raiz",
			"suma : multiplicacion OPMAS multiplicacion",
			"suma : multiplicacion OPMAS VARIABLE",
			"suma : multiplicacion OPMAS NUMERO",
			"suma : multiplicacion OPMAS",
			"suma : VARIABLE OPMAS expresion_parteParentesis",
			"suma : VARIABLE OPMAS fraccion",
			"suma : VARIABLE OPMAS potencia",
			"suma : VARIABLE OPMAS raiz",
			"suma : VARIABLE OPMAS multiplicacion",
			"suma : VARIABLE OPMAS VARIABLE",
			"suma : VARIABLE OPMAS NUMERO",
			"suma : VARIABLE OPMAS",
			"suma : NUMERO OPMAS expresion_parteParentesis",
			"suma : NUMERO OPMAS fraccion",
			"suma : NUMERO OPMAS potencia",
			"suma : NUMERO OPMAS raiz",
			"suma : NUMERO OPMAS multiplicacion",
			"suma : NUMERO OPMAS VARIABLE",
			"suma : NUMERO OPMAS NUMERO",
			"suma : NUMERO OPMAS",
			"suma : suma OPMAS expresion_parteParentesis",
			"suma : suma OPMAS fraccion",
			"suma : suma OPMAS potencia",
			"suma : suma OPMAS raiz",
			"suma : suma OPMAS multiplicacion",
			"suma : suma OPMAS VARIABLE",
			"suma : suma OPMAS NUMERO",
			"suma : suma OPMAS",
			"suma : expresion_parteParentesis expresion_parteSignada",
			"suma : fraccion expresion_parteSignada",
			"suma : potencia expresion_parteSignada",
			"suma : raiz expresion_parteSignada",
			"suma : multiplicacion expresion_parteSignada",
			"suma : VARIABLE expresion_parteSignada",
			"suma : NUMERO expresion_parteSignada",
			"suma : expresion_parteSignada expresion_parteSignada",
			"suma : suma expresion_parteSignada",
			"expresion_parteSignada : OPMENOS expresion_parteParentesis",
			"expresion_parteSignada : OPMENOS multiplicacion",
			"expresion_parteSignada : OPMENOS fraccion",
			"expresion_parteSignada : OPMENOS potencia",
			"expresion_parteSignada : OPMENOS raiz",
			"expresion_parteSignada : OPMENOS VARIABLE",
			"expresion_parteSignada : OPMENOS NUMERO",
			"expresion_parteSignada : OPMENOS",
			"expresion_parteSignada : OPMASMENOS expresion_parteParentesis",
			"expresion_parteSignada : OPMASMENOS multiplicacion",
			"expresion_parteSignada : OPMASMENOS fraccion",
			"expresion_parteSignada : OPMASMENOS potencia",
			"expresion_parteSignada : OPMASMENOS raiz",
			"expresion_parteSignada : OPMASMENOS VARIABLE",
			"expresion_parteSignada : OPMASMENOS NUMERO",
			"expresion_parteSignada : OPMASMENOS",
			"expresion_parteSignada : OPMENOSMAS expresion_parteParentesis",
			"expresion_parteSignada : OPMENOSMAS multiplicacion",
			"expresion_parteSignada : OPMENOSMAS fraccion",
			"expresion_parteSignada : OPMENOSMAS potencia",
			"expresion_parteSignada : OPMENOSMAS raiz",
			"expresion_parteSignada : OPMENOSMAS VARIABLE",
			"expresion_parteSignada : OPMENOSMAS NUMERO",
			"expresion_parteSignada : OPMENOSMAS",
			"expresion_parte : expresion_parteParentesis",
			"expresion_parte : suma",
			"expresion_parte : multiplicacion",
			"expresion_parte : fraccion",
			"expresion_parte : potencia",
			"expresion_parte : raiz",
			"expresion_parte : VARIABLE",
			"expresion_parte : NUMERO",
			"expresion_parte : expresion_parteSignada",
			"igualdad_incompleta : expresion_parte IGUAL",
			"expresion : expresion_parte",
			"expresion : expresion_parte IGUAL expresion_parte",
			"aceptable : expresion",
			"aceptable : igualdad_incompleta",
	};

//#line 309 "parser.y"
    /* Byacc/J expects a member method int yylex(). We need to provide one
       through this mechanism. See the jflex manual for more information. */

	/* reference to the lexer object */
	private TokensLex lexer;

	private String cadenaLaTeX;

	/**
	 * < cadena_LaTeX
	 */

	/* interface to the lexer */
	private int yylex() {
		int retVal = -1;
		try {
			retVal = lexer.yylex();
		} catch (IOException e) {
			System.err.println("IO Error:" + e);
		}
		return retVal;
	}

	/**
	 * Devuelve la cadena de LaTeX obtenida con la gramática.
	 *
	 * @return la cadena de LaTeX
	 */
	public String getLatex() {
		return this.cadenaLaTeX;
	}

	/* error reporting */
	public void yyerror(String error) {
		System.err.println("Error : " + error + " at line " + lexer.getLine());
		System.err.println("String rejected");
	}

	public void analizarCadena(String cadena) {
		this.cadenaLaTeX = null;
		StringReader str = new StringReader(cadena);
		lexer = new TokensLex(str, this);
		yyparse();
	}

	/* constructor taking in File Input */
	public Sintactico(Reader r) {
		lexer = new TokensLex(r, this);
	}

	public static void main(String[] args) throws IOException {
		Sintactico yyparser = new Sintactico(new FileReader(args[0]));
		yyparser.yyparse();
		System.out.println(yyparser.cadenaLaTeX);
	}

	//#line 1087 "Sintactico.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
	void yylexdebug(int state, int ch) {
		String s = null;
		if (ch < 0) ch = 0;
		if (ch <= YYMAXTOKEN) //check index bounds
			s = yyname[ch];    //now get it
		if (s == null)
			s = "illegal-symbol";
		debug("state " + state + ", reading " + ch + " (" + s + ")");
	}


	//The following are now global, to aid in error reporting
	int yyn;       //next next thing to do
	int yym;       //
	int yystate;   //current parsing state from state table
	String yys;    //current token string


	//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
	int yyparse() {
		boolean doaction;
		init_stacks();
		yynerrs = 0;
		yyerrflag = 0;
		yychar = -1;          //impossible char forces a read
		yystate = 0;            //initial state
		state_push(yystate);  //save it
		val_push(yylval);     //save empty value
		while (true) //until parsing is done, either correctly, or w/error
		{
			doaction = true;
			if (yydebug) debug("loop");
			//#### NEXT ACTION (from reduction table)
			for (yyn = yydefred[yystate]; yyn == 0; yyn = yydefred[yystate]) {
				if (yydebug) debug("yyn:" + yyn + "  state:" + yystate + "  yychar:" + yychar);
				if (yychar < 0)      //we want a char?
				{
					yychar = yylex();  //get next token
					if (yydebug) debug(" next yychar:" + yychar);
					//#### ERROR CHECK ####
					if (yychar < 0)    //it it didn't work/error
					{
						yychar = 0;      //change it to default string (no -1!)
						if (yydebug)
							yylexdebug(yystate, yychar);
					}
				}//yychar<0
				yyn = yysindex[yystate];  //get amount to shift by (shift index)
				if ((yyn != 0) && (yyn += yychar) >= 0 &&
						yyn <= YYTABLESIZE && yycheck[yyn] == yychar) {
					if (yydebug)
						debug("state " + yystate + ", shifting to state " + yytable[yyn]);
					//#### NEXT STATE ####
					yystate = yytable[yyn];//we are in a new state
					state_push(yystate);   //save it
					val_push(yylval);      //push our lval as the input for next rule
					yychar = -1;           //since we have 'eaten' a token, say we need another
					if (yyerrflag > 0)     //have we recovered an error?
						--yyerrflag;        //give ourselves credit
					doaction = false;        //but don't process yet
					break;   //quit the yyn=0 loop
				}

				yyn = yyrindex[yystate];  //reduce
				if ((yyn != 0) && (yyn += yychar) >= 0 &&
						yyn <= YYTABLESIZE && yycheck[yyn] == yychar) {   //we reduced!
					if (yydebug) debug("reduce");
					yyn = yytable[yyn];
					doaction = true; //get ready to execute
					break;         //drop down to actions
				} else //ERROR RECOVERY
				{
					if (yyerrflag == 0) {
						yyerror("syntax error");
						yynerrs++;
					}
					if (yyerrflag < 3) //low error count?
					{
						yyerrflag = 3;
						while (true)   //do until break
						{
							if (stateptr < 0)   //check for under & overflow here
							{
								yyerror("stack underflow. aborting...");  //note lower case 's'
								return 1;
							}
							yyn = yysindex[state_peek(0)];
							if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
									yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE) {
								if (yydebug)
									debug("state " + state_peek(0) + ", error recovery shifting to state " + yytable[yyn] + " ");
								yystate = yytable[yyn];
								state_push(yystate);
								val_push(yylval);
								doaction = false;
								break;
							} else {
								if (yydebug)
									debug("error recovery discarding state " + state_peek(0) + " ");
								if (stateptr < 0)   //check for under & overflow here
								{
									yyerror("Stack underflow. aborting...");  //capital 'S'
									return 1;
								}
								state_pop();
								val_pop();
							}
						}
					} else            //discard this token
					{
						if (yychar == 0)
							return 1; //yyabort
						if (yydebug) {
							yys = null;
							if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
							if (yys == null) yys = "illegal-symbol";
							debug("state " + yystate + ", error recovery discards token " + yychar + " (" + yys + ")");
						}
						yychar = -1;  //read another
					}
				}//end error recovery
			}//yyn=0 loop
			if (!doaction)   //any reason not to proceed?
				continue;      //skip action
			yym = yylen[yyn];          //get count of terminals on rhs
			if (yydebug)
				debug("state " + yystate + ", reducing " + yym + " by rule " + yyn + " (" + yyrule[yyn] + ")");
			if (yym > 0)                 //if count of rhs not 'nil'
				yyval = val_peek(yym - 1); //get current semantic value
			yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
			switch (yyn) {
//########## USER-SUPPLIED ACTIONS ##########
				case 1:
//#line 25 "parser.y"
				{
					yyval.sval = "\\left( \\textcolor{red}{\\_} \\right)";
					yyval.ival = 0;
					System.out.println("( __");
				}
				break;
				case 2:
//#line 26 "parser.y"
				{
					yyval.sval = "\\left[ \\textcolor{red}{\\_} \\right]";
					yyval.ival = 1;
					System.out.println("[ __");
				}
				break;
				case 3:
//#line 27 "parser.y"
				{
					yyval.sval = "\\left\\{ \\textcolor{red}{\\_} \\right\\}";
					yyval.ival = 2;
					System.out.println("{ __");
				}
				break;
				case 4:
//#line 29 "parser.y"
				{
					if (val_peek(1).ival == 0) {
						yyval.sval = "\\left( " + val_peek(0).sval + " \\textcolor{red}{\\_} \\right)";
						yyval.ival = val_peek(1).ival;
						System.out.println("( " + val_peek(0).sval + " __ ");
					} else if (val_peek(1).ival == 1) {
						yyval.sval = "\\left[ " + val_peek(0).sval + " \\textcolor{red}{\\_} \\right]";
						yyval.ival = val_peek(1).ival;
						System.out.println("[ " + val_peek(0).sval + " __ ");
					} else if (val_peek(1).ival == 2) {
						yyval.sval = "\\left\\{ " + val_peek(0).sval + " \\textcolor{red}{\\_} \\right\\}";
						yyval.ival = val_peek(1).ival;
						System.out.println("{ " + val_peek(0).sval + " __ ");
					}
				}
				break;
				case 5:
//#line 43 "parser.y"
				{
					int corte1 = val_peek(1).sval.lastIndexOf("\\textcolor{red}{\\_}");
					int corte2 = val_peek(1).sval.lastIndexOf("\\right");
					yyval.sval = val_peek(1).sval.substring(0, corte1) + val_peek(1).sval.substring(corte2);
					System.out.println("ABRE ?? CIERRE: " + yyval.sval);
				}
				break;
				case 6:
//#line 48 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("ABRE ?? __:" + yyval.sval);
				}
				break;
				case 7:
//#line 49 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("ABRE __ :" + yyval.sval);
				}
				break;
				case 8:
//#line 52 "parser.y"
				{
					yyval.sval = "\\sqrt [ " + val_peek(3).sval + " ] { " + val_peek(1).sval + " }";
					System.out.println("raiz: " + yyval.sval);
				}
				break;
				case 9:
//#line 53 "parser.y"
				{
					yyval.sval = "\\sqrt[" + val_peek(2).sval + "]{ " + val_peek(0).sval + " }";
					System.out.println("raiz ??  DE ?? __: " + yyval.sval);
				}
				break;
				case 10:
//#line 54 "parser.y"
				{
					yyval.sval = "\\sqrt[" + val_peek(1).sval + "]{ " + "\\textcolor{red}{\\_}" + " }";
					System.out.println("raiz ?? DE __: " + yyval.sval);
				}
				break;
				case 11:
//#line 55 "parser.y"
				{
					yyval.sval = "\\sqrt[" + val_peek(0).sval + "]{ " + "\\textcolor{red}{\\_}" + " }";
					System.out.println("raiz ?? __: " + yyval.sval);
				}
				break;
				case 12:
//#line 56 "parser.y"
				{
					yyval.sval = "\\sqrt { " + val_peek(1).sval + " }";
					System.out.println("raiz: " + yyval.sval);
				}
				break;
				case 13:
//#line 57 "parser.y"
				{
					yyval.sval = "\\sqrt { " + val_peek(0).sval + "\\textcolor{red}{\\_}" + " }";
					System.out.println("raiz DE ?? __" + yyval.sval);
				}
				break;
				case 14:
//#line 58 "parser.y"
				{
					yyval.sval = "\\sqrt { " + "\\textcolor{red}{\\_}" + " }";
					System.out.println("raiz DE __ " + yyval.sval);
				}
				break;
				case 15:
//#line 59 "parser.y"
				{
					yyval.sval = "\\sqrt { " + "\\textcolor{red}{\\_}" + " }";
					System.out.println("raiz __: " + yyval.sval);
				}
				break;
				case 16:
//#line 62 "parser.y"
				{
					yyval.sval = val_peek(3).sval + " ^ { " + val_peek(1).sval + " }";
					System.out.println("poten: " + yyval.sval);
				}
				break;
				case 17:
//#line 63 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " ^ { " + val_peek(0).sval + " \\textcolor{red}{\\_} }";
					System.out.println("poten: ?? ^ { ?? __ }" + yyval.sval);
				}
				break;
				case 18:
//#line 64 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " ^ { " + "\\textcolor{red}{\\_}" + " }";
					System.out.println("poten: ?? ^ { __ }" + yyval.sval);
				}
				break;
				case 19:
//#line 65 "parser.y"
				{
					yyval.sval = val_peek(3).sval + " ^ { " + val_peek(1).sval + " }";
					System.out.println("poten: " + yyval.sval);
				}
				break;
				case 20:
//#line 66 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " ^ { " + val_peek(0).sval + " \\textcolor{red}{\\_} }";
					System.out.println("poten: NUM ^ { ?? __ }" + yyval.sval);
				}
				break;
				case 21:
//#line 67 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " ^ { " + "\\textcolor{red}{\\_}" + " }";
					System.out.println("poten: NUM ^ { __ }" + yyval.sval);
				}
				break;
				case 22:
//#line 68 "parser.y"
				{
					yyval.sval = val_peek(3).sval + " ^ { " + val_peek(1).sval + " }";
					System.out.println(yyval.sval);
				}
				break;
				case 23:
//#line 69 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " ^ { " + val_peek(0).sval + " \\textcolor{red}{\\_} }";
					System.out.println("poten: VAR ^ { ?? __ }" + yyval.sval);
				}
				break;
				case 24:
//#line 70 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " ^ { " + "\\textcolor{red}{\\_}" + " }";
					System.out.println("poten: VAR ^ { __ }" + yyval.sval);
				}
				break;
				case 25:
//#line 73 "parser.y"
				{
					yyval.sval = "\\frac { " + val_peek(3).sval + " } { " + val_peek(1).sval + " }";
					System.out.println("Fraccion: " + yyval.sval);
				}
				break;
				case 26:
//#line 74 "parser.y"
				{
					yyval.sval = "\\frac { " + val_peek(2).sval + " } { " + val_peek(0).sval + " \\textcolor{red}{\\_} }";
					System.out.println("frac {??}/{?? __}: " + yyval.sval);
				}
				break;
				case 27:
//#line 75 "parser.y"
				{
					yyval.sval = "\\frac { " + val_peek(1).sval + " } { \\textcolor{red}{\\_} }";
					System.out.println("frac {??}/{__}: " + yyval.sval);
				}
				break;
				case 28:
//#line 76 "parser.y"
				{
					yyval.sval = "\\frac { " + val_peek(0).sval + " \\textcolor{red}{\\_} } { ? }";
					System.out.println("frac {??}/{__}: " + yyval.sval);
				}
				break;
				case 29:
//#line 77 "parser.y"
				{
					yyval.sval = "\\frac { \\textcolor{red}{\\_} } { ? }";
					System.out.println("frac { __}/{ }: " + yyval.sval);
				}
				break;
				case 30:
//#line 81 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 31:
//#line 82 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 32:
//#line 83 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 33:
//#line 84 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 34:
//#line 85 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 35:
//#line 86 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " \\cdot " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 36:
//#line 87 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " \\textcolor{red}{\\_} ";
					System.out.println(yyval.sval);
				}
				break;
				case 37:
//#line 88 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 38:
//#line 89 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 39:
//#line 90 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 40:
//#line 91 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 41:
//#line 92 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 42:
//#line 93 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " \\cdot " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 43:
//#line 94 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " " + " \\textcolor{red}{\\_} ";
					System.out.println(yyval.sval);
				}
				break;
				case 44:
//#line 95 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 45:
//#line 96 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 46:
//#line 97 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 47:
//#line 98 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 48:
//#line 99 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 49:
//#line 100 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " \\cdot " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 50:
//#line 101 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " \\textcolor{red}{\\_} ";
					System.out.println(yyval.sval);
				}
				break;
				case 51:
//#line 102 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 52:
//#line 103 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 53:
//#line 104 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 54:
//#line 105 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 55:
//#line 106 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 56:
//#line 107 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 57:
//#line 108 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " \\cdot " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 58:
//#line 109 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " \\textcolor{red}{\\_} ";
					System.out.println(yyval.sval);
				}
				break;
				case 59:
//#line 110 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 60:
//#line 111 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 61:
//#line 112 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 62:
//#line 113 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 63:
//#line 114 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 64:
//#line 115 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 65:
//#line 116 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " \\cdot " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 66:
//#line 117 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " \\textcolor{red}{\\_} ";
					System.out.println(yyval.sval);
				}
				break;
				case 67:
//#line 118 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 68:
//#line 119 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 69:
//#line 120 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 70:
//#line 121 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 71:
//#line 122 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 72:
//#line 123 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 73:
//#line 124 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " \\cdot " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 74:
//#line 125 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " \\textcolor{red}{\\_} ";
					System.out.println(yyval.sval);
				}
				break;
				case 75:
//#line 126 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 76:
//#line 127 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 77:
//#line 128 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 78:
//#line 129 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 79:
//#line 130 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 80:
//#line 131 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 81:
//#line 132 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " \\cdot " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 82:
//#line 133 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " \\textcolor{red}{\\_} ";
					System.out.println(yyval.sval);
				}
				break;
				case 83:
//#line 134 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " " + val_peek(0).sval;
					System.out.println(yyval.sval);
				}
				break;
				case 84:
//#line 138 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("()+(): " + yyval.sval);
				}
				break;
				case 85:
//#line 139 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("()+frac: " + yyval.sval);
				}
				break;
				case 86:
//#line 140 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("()+^: " + yyval.sval);
				}
				break;
				case 87:
//#line 141 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("()+sqrt: " + yyval.sval);
				}
				break;
				case 88:
//#line 142 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("()+*: " + yyval.sval);
				}
				break;
				case 89:
//#line 143 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("()+var: " + yyval.sval);
				}
				break;
				case 90:
//#line 144 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("()+num: " + yyval.sval);
				}
				break;
				case 91:
//#line 145 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("()+__: " + yyval.sval);
				}
				break;
				case 92:
//#line 146 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("frac+(): " + yyval.sval);
				}
				break;
				case 93:
//#line 147 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("frac+frac: " + yyval.sval);
				}
				break;
				case 94:
//#line 148 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("frac+poten: " + yyval.sval);
				}
				break;
				case 95:
//#line 149 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("frac+sqrt: " + yyval.sval);
				}
				break;
				case 96:
//#line 150 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("frac+multi: " + yyval.sval);
				}
				break;
				case 97:
//#line 151 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("frac+var: " + yyval.sval);
				}
				break;
				case 98:
//#line 152 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("frac+num: " + yyval.sval);
				}
				break;
				case 99:
//#line 153 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("frac+__: " + yyval.sval);
				}
				break;
				case 100:
//#line 154 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("poten+(): " + yyval.sval);
				}
				break;
				case 101:
//#line 155 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("poten+frac: " + yyval.sval);
				}
				break;
				case 102:
//#line 156 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("potencia+poten: " + yyval.sval);
				}
				break;
				case 103:
//#line 157 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("potencia+raiz: " + yyval.sval);
				}
				break;
				case 104:
//#line 158 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("potencia+multi: " + yyval.sval);
				}
				break;
				case 105:
//#line 159 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("potencia+var: " + yyval.sval);
				}
				break;
				case 106:
//#line 160 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("potencia+num: " + yyval.sval);
				}
				break;
				case 107:
//#line 161 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("potencia+__: " + yyval.sval);
				}
				break;
				case 108:
//#line 162 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("raiz+(): " + yyval.sval);
				}
				break;
				case 109:
//#line 163 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("raiz+fraccion: " + yyval.sval);
				}
				break;
				case 110:
//#line 164 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("raiz+potencia: " + yyval.sval);
				}
				break;
				case 111:
//#line 165 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("raiz+raiz: " + yyval.sval);
				}
				break;
				case 112:
//#line 166 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("raiz+multi: " + yyval.sval);
				}
				break;
				case 113:
//#line 167 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("raiz+var: " + yyval.sval);
				}
				break;
				case 114:
//#line 168 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("raiz+num: " + yyval.sval);
				}
				break;
				case 115:
//#line 169 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("raiz+__: " + yyval.sval);
				}
				break;
				case 116:
//#line 170 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("multi+(): " + yyval.sval);
				}
				break;
				case 117:
//#line 171 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("multi+frac: " + yyval.sval);
				}
				break;
				case 118:
//#line 172 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("multi+potencia: " + yyval.sval);
				}
				break;
				case 119:
//#line 173 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("multi+raiz: " + yyval.sval);
				}
				break;
				case 120:
//#line 174 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("multi+multi: " + yyval.sval);
				}
				break;
				case 121:
//#line 175 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("multi+var: " + yyval.sval);
				}
				break;
				case 122:
//#line 176 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("multi+num: " + yyval.sval);
				}
				break;
				case 123:
//#line 177 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("multi+__: " + yyval.sval);
				}
				break;
				case 124:
//#line 178 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("var+(): " + yyval.sval);
				}
				break;
				case 125:
//#line 179 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("var+frac: " + yyval.sval);
				}
				break;
				case 126:
//#line 180 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("var+potencia: " + yyval.sval);
				}
				break;
				case 127:
//#line 181 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("var+raiz: " + yyval.sval);
				}
				break;
				case 128:
//#line 182 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("var+multi: " + yyval.sval);
				}
				break;
				case 129:
//#line 183 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("var+var: " + yyval.sval);
				}
				break;
				case 130:
//#line 184 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("var+num: " + yyval.sval);
				}
				break;
				case 131:
//#line 185 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("var+__: " + yyval.sval);
				}
				break;
				case 132:
//#line 186 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("num+(): " + yyval.sval);
				}
				break;
				case 133:
//#line 187 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("num+frac: " + yyval.sval);
				}
				break;
				case 134:
//#line 188 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("num+potencia: " + yyval.sval);
				}
				break;
				case 135:
//#line 189 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("num+raiz: " + yyval.sval);
				}
				break;
				case 136:
//#line 190 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("num+multi: " + yyval.sval);
				}
				break;
				case 137:
//#line 191 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("num+var: " + yyval.sval);
				}
				break;
				case 138:
//#line 192 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("num+num: " + yyval.sval);
				}
				break;
				case 139:
//#line 193 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("num+__: " + yyval.sval);
				}
				break;
				case 140:
//#line 194 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("Suma+(): " + yyval.sval);
				}
				break;
				case 141:
//#line 195 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("Suma+frac: " + yyval.sval);
				}
				break;
				case 142:
//#line 196 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("Suma+potencia: " + yyval.sval);
				}
				break;
				case 143:
//#line 197 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("Suma+raiz: " + yyval.sval);
				}
				break;
				case 144:
//#line 198 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("Suma+multi: " + yyval.sval);
				}
				break;
				case 145:
//#line 199 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("Suma+var: " + yyval.sval);
				}
				break;
				case 146:
//#line 200 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " + " + val_peek(0).sval;
					System.out.println("Suma+num: " + yyval.sval);
				}
				break;
				case 147:
//#line 201 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " + \\textcolor{red}{\\_} ";
					System.out.println("Suma+__: " + yyval.sval);
				}
				break;
				case 148:
//#line 203 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("()+parteSignada: " + yyval.sval);
				}
				break;
				case 149:
//#line 204 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("frac +parteSignada: " + yyval.sval);
				}
				break;
				case 150:
//#line 205 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("poten+parteSignada: " + yyval.sval);
				}
				break;
				case 151:
//#line 206 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("raiz+parteSignada: " + yyval.sval);
				}
				break;
				case 152:
//#line 207 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("multi+parteSignada: " + yyval.sval);
				}
				break;
				case 153:
//#line 208 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("var+parteSignada: " + yyval.sval);
				}
				break;
				case 154:
//#line 209 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("num+parteSignada: " + yyval.sval);
				}
				break;
				case 155:
//#line 210 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("Signada+Signada: " + yyval.sval);
				}
				break;
				case 156:
//#line 211 "parser.y"
				{
					yyval.sval = val_peek(1).sval + val_peek(0).sval;
					System.out.println("Suma+parteSignada: " + yyval.sval);
				}
				break;
				case 157:
//#line 214 "parser.y"
				{
					yyval.sval = " - " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 158:
//#line 215 "parser.y"
				{
					yyval.sval = " - " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 159:
//#line 216 "parser.y"
				{
					yyval.sval = " - " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 160:
//#line 217 "parser.y"
				{
					yyval.sval = " - " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 161:
//#line 218 "parser.y"
				{
					yyval.sval = " - " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 162:
//#line 219 "parser.y"
				{
					yyval.sval = " - " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 163:
//#line 220 "parser.y"
				{
					yyval.sval = " - " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 164:
//#line 221 "parser.y"
				{
					yyval.sval = " - \\textcolor{red}{\\_} ";
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 165:
//#line 222 "parser.y"
				{
					yyval.sval = " \\pm " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 166:
//#line 223 "parser.y"
				{
					yyval.sval = " \\pm " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 167:
//#line 224 "parser.y"
				{
					yyval.sval = " \\pm " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 168:
//#line 225 "parser.y"
				{
					yyval.sval = " \\pm " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 169:
//#line 226 "parser.y"
				{
					yyval.sval = " \\pm " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 170:
//#line 227 "parser.y"
				{
					yyval.sval = " \\pm " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 171:
//#line 228 "parser.y"
				{
					yyval.sval = " \\pm " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 172:
//#line 229 "parser.y"
				{
					yyval.sval = " \\pm \\textcolor{red}{\\_} ";
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 173:
//#line 230 "parser.y"
				{
					yyval.sval = " \\mp " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 174:
//#line 231 "parser.y"
				{
					yyval.sval = " \\mp " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 175:
//#line 232 "parser.y"
				{
					yyval.sval = " \\mp " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 176:
//#line 233 "parser.y"
				{
					yyval.sval = " \\mp " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 177:
//#line 234 "parser.y"
				{
					yyval.sval = " \\mp " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 178:
//#line 235 "parser.y"
				{
					yyval.sval = " \\mp " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 179:
//#line 236 "parser.y"
				{
					yyval.sval = " \\mp " + val_peek(0).sval;
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 180:
//#line 237 "parser.y"
				{
					yyval.sval = " \\mp \\textcolor{red}{\\_} ";
					System.out.println("expresion_parteSignada " + yyval.sval);
				}
				break;
				case 181:
//#line 269 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 182:
//#line 270 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 183:
//#line 271 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 184:
//#line 272 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 185:
//#line 273 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 186:
//#line 274 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 187:
//#line 275 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 188:
//#line 276 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 189:
//#line 277 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion_parte: " + yyval.sval);
				}
				break;
				case 190:
//#line 296 "parser.y"
				{
					yyval.sval = val_peek(1).sval + " = \\textcolor{red}{\\_}";
					System.out.println("igualdad incompleta: " + yyval.sval);
				}
				break;
				case 191:
//#line 299 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("expresion: " + yyval.sval);
				}
				break;
				case 192:
//#line 300 "parser.y"
				{
					yyval.sval = val_peek(2).sval + " = " + val_peek(0).sval;
					System.out.println("expresion: " + yyval.sval);
				}
				break;
				case 193:
//#line 303 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("Aceptada: " + yyval.sval);
					this.cadenaLaTeX = yyval.sval;
				}
				break;
				case 194:
//#line 304 "parser.y"
				{
					yyval.sval = val_peek(0).sval;
					System.out.println("Aceptada: " + yyval.sval);
					this.cadenaLaTeX = yyval.sval;
				}
				break;
//#line 2027 "Sintactico.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
			}//switch
			//#### Now let's reduce... ####
			if (yydebug) debug("reduce");
			state_drop(yym);             //we just reduced yylen states
			yystate = state_peek(0);     //get new state
			val_drop(yym);               //corresponding value drop
			yym = yylhs[yyn];            //select next TERMINAL(on lhs)
			if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
			{
				if (yydebug) debug("After reduction, shifting from state 0 to state " + YYFINAL + "");
				yystate = YYFINAL;         //explicitly say we're done
				state_push(YYFINAL);       //and save it
				val_push(yyval);           //also save the semantic value of parsing
				if (yychar < 0)            //we want another character?
				{
					yychar = yylex();        //get next character
					if (yychar < 0) yychar = 0;  //clean, if necessary
					if (yydebug)
						yylexdebug(yystate, yychar);
				}
				if (yychar == 0)          //Good exit (if lex returns 0 ;-)
					break;                 //quit the loop--all DONE
			}//if yystate
			else                        //else not done yet
			{   //get next state and push, for next yydefred[]
				yyn = yygindex[yym];      //find out where to go
				if ((yyn != 0) && (yyn += yystate) >= 0 &&
						yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
					yystate = yytable[yyn]; //get new state
				else
					yystate = yydgoto[yym]; //else go to new defred
				if (yydebug)
					debug("after reduction, shifting from state " + state_peek(0) + " to state " + yystate + "");
				state_push(yystate);     //going again, so push state & val...
				val_push(yyval);         //for next action
			}
		}//main loop
		return 0;//yyaccept!!
	}
//## end of method parse() ######################################


//## run() --- for Thread #######################################

	/**
	 * A default run method, used for operating this parser
	 * object in the background.  It is intended for extending Thread
	 * or implementing Runnable.  Turn off with -Jnorun .
	 */
	public void run() {
		yyparse();
	}
//## end of method run() ########################################


//## Constructors ###############################################

	/**
	 * Default constructor.  Turn off with -Jnoconstruct .
	 */
	public Sintactico() {
		//nothing to do
	}


	/**
	 * Create a parser, setting the debug to true or false.
	 *
	 * @param debugMe true for debugging, false for no debug.
	 */
	public Sintactico(boolean debugMe) {
		yydebug = debugMe;
	}
//###############################################################


}
//################### END OF CLASS ##############################
